// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id                String   @id @default(cuid())
  userId            String?
  slug              String   @unique
  folder            String   @unique
  title             String
  summary           String?
  description       String?
  organization      String?
  workType          String?
  year              Int?
  role              String?
  seniority         String?
  categories        String[] @default([])
  skills            String[] @default([])
  tools             String[] @default([])
  tags              String[] @default([])
  highlights        String[] @default([])
  links             Json?
  nda               Boolean?
  coverImage        String?
  caseProblem       String?
  caseActions       String?
  caseResults       String?
  schemaVersion     String?
  metadataChecksum  String?
  briefChecksum     String?
  metadataUpdatedAt DateTime?
  briefUpdatedAt    DateTime?
  fsLastModified    DateTime?
  lastSyncedAt      DateTime?
  syncStatus        String   @default("clean")
  syncWarnings      Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  assets       ProjectAsset[]
  deliverables ProjectDeliverable[]
  files        ProjectFile[]
  analysis     ProjectAnalysis?

  @@map("projects")
}

model ProjectAsset {
  id             String   @id @default(cuid())
  projectId      String
  relativePath   String
  label          String?
  type           String
  size           Int?
  checksum       String?
  lastModifiedAt DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, relativePath])
  @@map("project_assets")
}

model ProjectDeliverable {
  id             String   @id @default(cuid())
  projectId      String
  relativePath   String
  label          String?
  format         String?
  size           Int?
  checksum       String?
  lastModifiedAt DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, relativePath])
  @@map("project_deliverables")
}

model ProjectFile {
  id           String   @id @default(cuid())
  projectId    String
  name         String
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  thumbnailUrl String?
  description  String?
  tags         String[] @default([])
  featured     Boolean  @default(false)
  order        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  project  Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  analysis FileAnalysis?

  @@map("project_files")
}

model ProjectAnalysis {
  id                  String   @id @default(cuid())
  projectId           String   @unique
  status              String   @default("pending") // pending, analyzing, completed, failed
  confidence          Float?
  processingTime      Float?
  filesAnalyzed       Int      @default(0)
  insightsFound       Int      @default(0)
  primaryProblem      String?
  problemConfidence   Float?
  problemEvidence     Json?
  problemAlternatives Json?
  primarySolution     String?
  solutionConfidence  Float?
  solutionElements    Json?
  designPatterns      String[] @default([])
  primaryImpact       String?
  impactConfidence    Float?
  metrics             Json?
  businessValue       String?
  story               String?
  challenges          String[] @default([])
  process             String[] @default([])
  suggestedTitle      String?
  suggestedCategory   String?
  suggestedTags       String[] @default([])
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_analyses")
}

model FileAnalysis {
  id             String   @id @default(cuid())
  fileId         String   @unique
  status         String   @default("pending")
  contentType    String?
  insights       Json?
  extractedText  String?
  metadata       Json?
  processingTime Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  file ProjectFile @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@map("file_analyses")
}
