import React, { useState, useRef, useCallback, useEffect } from 'react';
import { 
  Plus, 
  Trash2, 
  Move, 
  Type, 
  Image, 
  Grid, 
  Layout, 
  Palette,
  Save,
  Eye,
  Undo,
  Redo,
  Settings,
  Copy,
  AlignLeft,
  AlignCenter,
  AlignRight,
  Bold,
  Italic,
  Underline,
  Upload,
  RotateCw,
  Crop,
  ZoomIn,
  ZoomOut,
  GripVertical,
  ChevronUp,
  ChevronDown,
  Edit3,
  Link,
  List,
  ListOrdered,
  MousePointer,
  Square,
  Menu,
  X,
  Smartphone,
  Monitor,
  Tablet,
  Instagram,
  Play,
  Camera,
  Video,
  Share2,
  Heart,
  MessageCircle,
  Send,
  Bookmark,
  Globe,
  Code,
  Layers,
  Maximize,
  Info,
  FileText,
  Book,
  Printer,
  ChevronLeft,
  ChevronRight,
  Download,
  Folder,
  PanelLeftOpen,
  RefreshCw,
  Paintbrush,
  Sliders,
  Zap
} from 'lucide-react';

// Block Types
const BLOCK_TYPES = {
  TEXT: 'text',
  IMAGE: 'image', 
  GRID: 'grid',
  SPACER: 'spacer',
  BUTTON: 'button',
  HEADING: 'heading',
  GALLERY: 'gallery',
  HERO: 'hero',
  QUOTE: 'quote',
  SOCIAL_POST: 'social_post',
  SOCIAL_STORY: 'social_story',
  SOCIAL_CAROUSEL: 'social_carousel',
  WEBSITE_DESKTOP: 'website_desktop',
  WEBSITE_MOBILE: 'website_mobile',
  APP_MOBILE: 'app_mobile',
  APP_DESKTOP: 'app_desktop',
  PRINT_TRIFOLD: 'print_trifold',
  PRINT_CATALOG: 'print_catalog',
  PRINT_BOOK: 'print_book',
  PRINT_POSTER: 'print_poster'
};

// Typography Options
const FONT_FAMILIES = [
  { value: 'Inter, sans-serif', label: 'Inter' },
  { value: 'Helvetica, Arial, sans-serif', label: 'Helvetica' },
  { value: 'Georgia, serif', label: 'Georgia' },
  { value: 'Times New Roman, serif', label: 'Times New Roman' },
  { value: 'Roboto, sans-serif', label: 'Roboto' },
  { value: 'Open Sans, sans-serif', label: 'Open Sans' },
  { value: 'Lato, sans-serif', label: 'Lato' },
  { value: 'Poppins, sans-serif', label: 'Poppins' },
  { value: 'Playfair Display, serif', label: 'Playfair Display' },
  { value: 'Montserrat, sans-serif', label: 'Montserrat' },
  { value: 'Monaco, monospace', label: 'Monaco (Code)' }
];

const FONT_WEIGHTS = [
  { value: '300', label: 'Light' },
  { value: '400', label: 'Normal' },
  { value: '500', label: 'Medium' },
  { value: '600', label: 'Semi Bold' },
  { value: '700', label: 'Bold' },
  { value: '800', label: 'Extra Bold' },
  { value: '900', label: 'Black' }
];

// Color Palettes
const COLOR_PALETTES = {
  brand: [
    '#3b82f6', '#1e40af', '#1d4ed8', '#2563eb',
    '#ef4444', '#dc2626', '#b91c1c', '#991b1b',
    '#10b981', '#059669', '#047857', '#065f46',
    '#f59e0b', '#d97706', '#b45309', '#92400e'
  ],
  neutral: [
    '#000000', '#374151', '#6b7280', '#9ca3af',
    '#d1d5db', '#e5e7eb', '#f3f4f6', '#ffffff',
    '#1f2937', '#4b5563', '#111827', '#030712'
  ],
  vibrant: [
    '#8b5cf6', '#a855f7', '#c084fc', '#d8b4fe',
    '#06b6d4', '#0891b2', '#0e7490', '#155e75',
    '#84cc16', '#65a30d', '#4d7c0f', '#365314',
    '#f97316', '#ea580c', '#c2410c', '#9a3412'
  ]
};

// Initial template blocks
const DEFAULT_TEMPLATE = [
  {
    id: '1',
    type: BLOCK_TYPES.HERO,
    content: {
      title: 'Welcome to My Portfolio',
      subtitle: 'Creative Professional & Designer',
      backgroundImage: null,
      overlayOpacity: 0.4
    },
    styles: { 
      minHeight: '60vh', 
      textAlign: 'center', 
      color: 'white',
      padding: '2rem 1rem',
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'center',
      alignItems: 'center'
    }
  },
  {
    id: '2', 
    type: BLOCK_TYPES.TEXT,
    content: 'I\'m a creative professional passionate about bringing ideas to life through design and innovation.',
    styles: { 
      fontSize: '1.1rem', 
      textAlign: 'center', 
      color: '#6b7280', 
      marginBottom: '2rem',
      padding: '1rem',
      lineHeight: '1.6'
    }
  },
  {
    id: '3',
    type: BLOCK_TYPES.WEBSITE_DESKTOP,
    content: {
      title: 'E-Commerce Platform',
      description: 'A modern, scalable online shopping platform with advanced features',
      url: 'mystore.com',
      projectType: 'Full-Stack Development',
      technologies: 'React, Node.js, MongoDB, Stripe'
    },
    styles: {
      padding: '2rem',
      display: 'flex',
      justifyContent: 'center',
      marginBottom: '2rem'
    }
  },
  {
    id: '4',
    type: BLOCK_TYPES.SOCIAL_POST,
    content: {
      username: 'your_portfolio',
      location: 'Creative Studio',
      caption: 'Just finished this amazing project! Really excited to share the creative process behind this design. âœ¨',
      hashtags: '#portfolio #design #creative #ux',
      likes: '127',
      timeAgo: '2h',
      mediaUrl: null,
      mediaType: 'image'
    },
    styles: {
      padding: '2rem',
      display: 'flex',
      justifyContent: 'center',
      marginBottom: '2rem'
    }
  }
];

// Mobile breakpoint hook
const useIsMobile = () => {
  const [isMobile, setIsMobile] = useState(false);
  
  useEffect(() => {
    const checkIsMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    checkIsMobile();
    window.addEventListener('resize', checkIsMobile);
    return () => window.removeEventListener('resize', checkIsMobile);
  }, []);
  
  return isMobile;
};

// Social Media Post Component
const SocialMediaPost = ({ block, onUpdate, uploadFile, isEditing = false }) => {
  const handleImageUpload = async (file) => {
    const uploadedFile = await uploadFile(file);
    onUpdate(block.id, { 
      content: { 
        ...block.content, 
        mediaUrl: uploadedFile.url,
        mediaType: file.type.startsWith('video/') ? 'video' : 'image'
      }
    });
  };

  const handleContentChange = (field, value) => {
    onUpdate(block.id, {
      content: { ...block.content, [field]: value }
    });
  };

  const clearMedia = () => {
    onUpdate(block.id, {
      content: { 
        ...block.content, 
        mediaUrl: null,
        mediaType: null
      }
    });
  };

  return (
    <div className="bg-white border border-gray-200 rounded-xl overflow-hidden shadow-sm max-w-sm mx-auto">
      {/* Instagram-style Header */}
      <div className="p-3 flex items-center gap-3">
        <div className="w-8 h-8 bg-gradient-to-r from-purple-400 to-pink-400 rounded-full flex items-center justify-center">
          <Camera className="h-4 w-4 text-white" />
        </div>
        <div className="flex-1">
          <p className="font-semibold text-sm">{block.content?.username || 'your_portfolio'}</p>
          <p className="text-xs text-gray-500">{block.content?.location || 'Location'}</p>
        </div>
        <button className="p-1">
          <div className="w-1 h-1 bg-gray-400 rounded-full mb-1"></div>
          <div className="w-1 h-1 bg-gray-400 rounded-full mb-1"></div>
          <div className="w-1 h-1 bg-gray-400 rounded-full"></div>
        </button>
      </div>

      {/* Media Content */}
      <div className="relative aspect-square bg-gray-100">
        {block.content?.mediaUrl ? (
          block.content.mediaType === 'video' ? (
            <div className="relative w-full h-full">
              <video 
                src={block.content.mediaUrl}
                className="w-full h-full object-cover"
                controls={isEditing}
                muted
                loop
                autoPlay={!isEditing}
              />
              {!isEditing && (
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="bg-black bg-opacity-50 rounded-full p-3">
                    <Play className="h-6 w-6 text-white" />
                  </div>
                </div>
              )}
            </div>
          ) : (
            <img 
              src={block.content.mediaUrl} 
              alt="Social post"
              className="w-full h-full object-cover"
            />
          )
        ) : (
          <FileUploadArea onFileUpload={handleImageUpload}>
            <div className="w-full h-full flex items-center justify-center border-2 border-dashed border-gray-300 hover:border-blue-400 transition-colors">
              <div className="text-center">
                <div className="flex justify-center gap-2 mb-2">
                  <Camera className="h-8 w-8 text-gray-400" />
                  <Video className="h-8 w-8 text-gray-400" />
                </div>
                <p className="text-sm text-gray-500">Upload Image or Video</p>
                <p className="text-xs text-gray-400 mt-1">1080x1080 recommended</p>
              </div>
            </div>
          </FileUploadArea>
        )}
        
        {block.content?.mediaUrl && (
          <div className="absolute top-2 right-2 flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity">
            <FileUploadArea onFileUpload={handleImageUpload}>
              <button className="bg-black bg-opacity-50 text-white p-2 rounded-lg hover:bg-opacity-70">
                <Upload className="h-4 w-4" />
              </button>
            </FileUploadArea>
            <button 
              onClick={clearMedia}
              className="bg-red-500 bg-opacity-80 text-white p-2 rounded-lg hover:bg-opacity-100"
              title="Remove Media"
            >
              <X className="h-4 w-4" />
            </button>
          </div>
        )}
      </div>

      {/* Actions Bar */}
      <div className="px-3 py-2">
        <div className="flex items-center justify-between mb-2">
          <div className="flex items-center gap-3">
            <Heart className="h-6 w-6" />
            <MessageCircle className="h-6 w-6" />
            <Send className="h-6 w-6" />
          </div>
          <Bookmark className="h-6 w-6" />
        </div>
        <p className="text-sm font-semibold mb-1">{block.content?.likes || '0'} likes</p>
        
        {/* Caption */}
        <div className="text-sm">
          <span className="font-semibold mr-2">{block.content?.username || 'your_portfolio'}</span>
          <span>{block.content?.caption || 'Add your caption here...'}</span>
        </div>
        
        {block.content?.hashtags && (
          <p className="text-sm text-blue-600 mt-1">{block.content.hashtags}</p>
        )}
        
        <p className="text-xs text-gray-500 mt-2 uppercase tracking-wide">
          {block.content?.timeAgo || '1 hour ago'}
        </p>
      </div>
    </div>
  );
};

// Social Media Story Component  
const SocialMediaStory = ({ block, onUpdate, uploadFile, isEditing = false }) => {
  const handleMediaUpload = async (file) => {
    const uploadedFile = await uploadFile(file);
    onUpdate(block.id, { 
      content: { 
        ...block.content, 
        mediaUrl: uploadedFile.url,
        mediaType: file.type.startsWith('video/') ? 'video' : 'image'
      }
    });
  };

  return (
    <div className="bg-black rounded-2xl overflow-hidden shadow-lg mx-auto" style={{ width: '280px', height: '498px' }}>
      {/* Story Header */}
      <div className="relative p-4 flex items-center gap-3 z-10">
        <div className="w-8 h-8 bg-gradient-to-r from-purple-400 to-pink-400 rounded-full flex items-center justify-center">
          <Camera className="h-4 w-4 text-white" />
        </div>
        <div className="flex-1">
          <p className="font-semibold text-sm text-white">{block.content?.username || 'your_portfolio'}</p>
          <p className="text-xs text-gray-300">{block.content?.timeAgo || '2h'}</p>
        </div>
        <button className="text-white">
          <X className="h-5 w-5" />
        </button>
      </div>

      {/* Story Content */}
      <div className="relative -mt-16 w-full h-full">
        {block.content?.mediaUrl ? (
          <div className="relative w-full h-full">
            {block.content.mediaType === 'video' ? (
              <video 
                src={block.content.mediaUrl}
                className="w-full h-full object-cover"
                controls={isEditing}
                muted
                loop
                autoPlay={!isEditing}
              />
            ) : (
              <img 
                src={block.content.mediaUrl} 
                alt="Story content"
                className="w-full h-full object-cover"
              />
            )}
            
            {/* Story Text Overlay */}
            {block.content?.storyText && (
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="bg-black bg-opacity-40 rounded-lg p-4 m-4">
                  <p className="text-white text-center font-bold text-lg">
                    {block.content.storyText}
                  </p>
                </div>
              </div>
            )}
          </div>
        ) : (
          <FileUploadArea onFileUpload={handleMediaUpload}>
            <div className="w-full h-full flex items-center justify-center border-2 border-dashed border-gray-600 hover:border-blue-400 transition-colors">
              <div className="text-center">
                <div className="flex justify-center gap-2 mb-3">
                  <Camera className="h-10 w-10 text-gray-400" />
                  <Video className="h-10 w-10 text-gray-400" />
                </div>
                <p className="text-white font-medium">Upload Story Content</p>
                <p className="text-gray-300 text-sm mt-1">1080x1920 recommended</p>
              </div>
            </div>
          </FileUploadArea>
        )}
        
        {block.content?.mediaUrl && (
          <div className="absolute top-20 right-4 opacity-0 group-hover:opacity-100 transition-opacity">
            <FileUploadArea onFileUpload={handleMediaUpload}>
              <button className="bg-black bg-opacity-50 text-white p-2 rounded-lg hover:bg-opacity-70">
                <Upload className="h-4 w-4" />
              </button>
            </FileUploadArea>
          </div>
        )}

        {/* Progress Bar */}
        <div className="absolute top-4 left-4 right-4">
          <div className="h-0.5 bg-white bg-opacity-30 rounded-full">
            <div className="h-full bg-white rounded-full w-1/3"></div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Social Media Carousel Component
const SocialMediaCarousel = ({ block, onUpdate, uploadFile }) => {
  const images = block.content?.images || [];
  
  const handleImageUpload = async (file) => {
    const uploadedFile = await uploadFile(file);
    const newImages = [...images, uploadedFile];
    onUpdate(block.id, { 
      content: { 
        ...block.content, 
        images: newImages
      }
    });
  };

  const removeImage = (index) => {
    const newImages = images.filter((_, i) => i !== index);
    onUpdate(block.id, {
      content: { ...block.content, images: newImages }
    });
  };

  return (
    <div className="bg-white border border-gray-200 rounded-xl overflow-hidden shadow-sm max-w-sm mx-auto">
      {/* Header */}
      <div className="p-3 flex items-center gap-3">
        <div className="w-8 h-8 bg-gradient-to-r from-purple-400 to-pink-400 rounded-full flex items-center justify-center">
          <Camera className="h-4 w-4 text-white" />
        </div>
        <div className="flex-1">
          <p className="font-semibold text-sm">{block.content?.username || 'your_portfolio'}</p>
        </div>
      </div>

      {/* Carousel Content */}
      <div className="relative aspect-square bg-gray-100">
        {images.length > 0 ? (
          <div className="relative w-full h-full">
            <img 
              src={images[0].url} 
              alt="Carousel item"
              className="w-full h-full object-cover"
            />
            {images.length > 1 && (
              <>
                <div className="absolute top-2 right-2 bg-black bg-opacity-60 text-white px-2 py-1 rounded-full text-xs">
                  1/{images.length}
                </div>
                <div className="absolute inset-x-0 bottom-2 flex justify-center gap-1">
                  {images.map((_, index) => (
                    <div 
                      key={index}
                      className={`w-1.5 h-1.5 rounded-full ${index === 0 ? 'bg-white' : 'bg-white bg-opacity-50'}`}
                    />
                  ))}
                </div>
              </>
            )}
          </div>
        ) : (
          <FileUploadArea onFileUpload={handleImageUpload}>
            <div className="w-full h-full flex items-center justify-center border-2 border-dashed border-gray-300 hover:border-blue-400 transition-colors">
              <div className="text-center">
                <Grid className="mx-auto h-8 w-8 text-gray-400 mb-2" />
                <p className="text-sm text-gray-500">Upload Carousel Images</p>
                <p className="text-xs text-gray-400 mt-1">Multiple 1080x1080 images</p>
              </div>
            </div>
          </FileUploadArea>
        )}
      </div>

      {/* Actions */}
      <div className="px-3 py-2">
        <div className="flex items-center justify-between mb-2">
          <div className="flex items-center gap-3">
            <Heart className="h-6 w-6" />
            <MessageCircle className="h-6 w-6" />
            <Send className="h-6 w-6" />
          </div>
          <Bookmark className="h-6 w-6" />
        </div>
        
        <div className="text-sm">
          <span className="font-semibold mr-2">{block.content?.username || 'your_portfolio'}</span>
          <span>{block.content?.caption || 'Swipe to see more...'}</span>
        </div>
      </div>
      
      {/* Image Management */}
      {images.length > 0 && (
        <div className="border-t border-gray-100 p-3">
          <div className="flex gap-2 overflow-x-auto">
            {images.map((image, index) => (
              <div key={index} className="relative flex-shrink-0">
                <img 
                  src={image.url} 
                  alt={`Carousel ${index + 1}`}
                  className="w-12 h-12 object-cover rounded border-2 border-blue-500"
                />
                <button
                  onClick={() => removeImage(index)}
                  className="absolute -top-1 -right-1 bg-red-500 text-white rounded-full p-0.5"
                >
                  <X className="h-3 w-3" />
                </button>
              </div>
            ))}
            <FileUploadArea onFileUpload={handleImageUpload}>
              <div className="w-12 h-12 border-2 border-dashed border-gray-300 rounded flex items-center justify-center cursor-pointer hover:border-blue-400">
                <Plus className="h-4 w-4 text-gray-400" />
              </div>
            </FileUploadArea>
          </div>
        </div>
      )}
    </div>
  );
};

// Desktop Website Mockup Component
const DesktopWebsiteMockup = ({ block, onUpdate, uploadFile, isEditing = false }) => {
  const handleScreenshotUpload = async (file) => {
    const uploadedFile = await uploadFile(file);
    onUpdate(block.id, { 
      content: { 
        ...block.content, 
        screenshot: uploadedFile.url
      }
    });
  };

  const clearScreenshot = () => {
    onUpdate(block.id, {
      content: { 
        ...block.content, 
        screenshot: null
      }
    });
  };

  return (
    <div className="max-w-4xl mx-auto">
      {/* Browser Frame */}
      <div className="bg-gray-100 rounded-t-lg p-3 flex items-center gap-2">
        <div className="flex gap-2">
          <div className="w-3 h-3 bg-red-400 rounded-full"></div>
          <div className="w-3 h-3 bg-yellow-400 rounded-full"></div>
          <div className="w-3 h-3 bg-green-400 rounded-full"></div>
        </div>
        <div className="flex-1 mx-4">
          <div className="bg-white rounded px-3 py-1 text-sm text-gray-600 flex items-center gap-2">
            <Globe className="h-3 w-3" />
            <span>{block.content?.url || 'yourwebsite.com'}</span>
          </div>
        </div>
      </div>
      
      {/* Website Content */}
      <div className="bg-white border border-gray-200 aspect-[16/10] relative overflow-hidden">
        {block.content?.screenshot ? (
          <div className="relative w-full h-full group">
            <img 
              src={block.content.screenshot} 
              alt="Website screenshot"
              className="w-full h-full object-cover object-top"
            />
            {isEditing && (
              <div className="absolute top-4 right-4 flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity">
                <FileUploadArea onFileUpload={handleScreenshotUpload}>
                  <button className="bg-black bg-opacity-50 text-white p-2 rounded-lg hover:bg-opacity-70">
                    <Upload className="h-4 w-4" />
                  </button>
                </FileUploadArea>
                <button 
                  onClick={clearScreenshot}
                  className="bg-red-500 bg-opacity-80 text-white p-2 rounded-lg hover:bg-opacity-100"
                  title="Remove Screenshot"
                >
                  <X className="h-4 w-4" />
                </button>
              </div>
            )}
          </div>
        ) : (
          <FileUploadArea onFileUpload={handleScreenshotUpload}>
            <div className="w-full h-full flex items-center justify-center bg-gray-50 border-2 border-dashed border-gray-300 hover:border-blue-400 transition-colors">
              <div className="text-center">
                <Monitor className="mx-auto h-16 w-16 text-gray-400 mb-4" />
                <h3 className="text-lg font-medium text-gray-700 mb-2">Upload Website Screenshot</h3>
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 max-w-sm mx-auto">
                  <div className="flex items-center gap-2 mb-2">
                    <Info className="h-4 w-4 text-blue-600" />
                    <span className="text-sm font-medium text-blue-800">Recommended Size:</span>
                  </div>
                  <p className="text-sm text-blue-700 mb-1"><strong>1920x1200</strong> or <strong>1440x900</strong> pixels</p>
                  <p className="text-xs text-blue-600">Full browser viewport screenshot</p>
                  <div className="mt-3 pt-3 border-t border-blue-200">
                    <p className="text-xs text-blue-600"><strong>Example:</strong> Take a screenshot of your entire website homepage at desktop resolution</p>
                  </div>
                </div>
              </div>
            </div>
          </FileUploadArea>
        )}
      </div>
      
      {/* Website Info */}
      <div className="bg-gray-50 rounded-b-lg p-4 border-t border-gray-200">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="font-semibold text-gray-800">{block.content?.title || 'Website Title'}</h3>
            <p className="text-sm text-gray-600">{block.content?.description || 'Brief description of the website project'}</p>
          </div>
          <div className="text-right">
            <div className="text-xs text-gray-500 uppercase tracking-wide">Project Type</div>
            <div className="text-sm font-medium text-gray-700">{block.content?.projectType || 'Web Design'}</div>
          </div>
        </div>
        {block.content?.technologies && (
          <div className="mt-3 flex flex-wrap gap-2">
            {block.content.technologies.split(',').map((tech, index) => (
              <span key={index} className="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full">
                {tech.trim()}
              </span>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

// Mobile Website Mockup Component
const MobileWebsiteMockup = ({ block, onUpdate, uploadFile, isEditing = false }) => {
  const handleScreenshotUpload = async (file) => {
    const uploadedFile = await uploadFile(file);
    onUpdate(block.id, { 
      content: { 
        ...block.content, 
        screenshot: uploadedFile.url
      }
    });
  };

  return (
    <div className="max-w-sm mx-auto">
      {/* Phone Frame */}
      <div className="bg-black rounded-[2.5rem] p-4 shadow-2xl">
        <div className="bg-white rounded-[2rem] overflow-hidden">
          {/* Status Bar */}
          <div className="bg-black text-white px-4 py-1 text-xs flex justify-between items-center">
            <span>9:41</span>
            <div className="flex items-center gap-1">
              <div className="w-4 h-2 border border-white rounded-sm">
                <div className="w-3/4 h-full bg-white rounded-sm"></div>
              </div>
            </div>
          </div>
          
          {/* Browser Bar */}
          <div className="bg-gray-100 px-3 py-2 flex items-center gap-2">
            <div className="flex-1 bg-white rounded-full px-3 py-1 text-xs text-gray-600 flex items-center gap-2">
              <Globe className="h-3 w-3" />
              <span>{block.content?.url || 'yoursite.com'}</span>
            </div>
          </div>
          
          {/* Website Content */}
          <div className="aspect-[9/16] relative">
            {block.content?.screenshot ? (
              <div className="relative w-full h-full">
                <img 
                  src={block.content.screenshot} 
                  alt="Mobile website screenshot"
                  className="w-full h-full object-cover object-top"
                />
                {isEditing && (
                  <div className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
                    <FileUploadArea onFileUpload={handleScreenshotUpload}>
                      <button className="bg-black bg-opacity-50 text-white p-2 rounded-lg hover:bg-opacity-70">
                        <Upload className="h-3 w-3" />
                      </button>
                    </FileUploadArea>
                  </div>
                )}
              </div>
            ) : (
              <FileUploadArea onFileUpload={handleScreenshotUpload}>
                <div className="w-full h-full flex items-center justify-center bg-gray-50 border-2 border-dashed border-gray-300 hover:border-blue-400 transition-colors">
                  <div className="text-center px-4">
                    <Smartphone className="mx-auto h-12 w-12 text-gray-400 mb-3" />
                    <h4 className="text-sm font-medium text-gray-700 mb-2">Mobile Website Screenshot</h4>
                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 text-left">
                      <div className="flex items-center gap-2 mb-2">
                        <Info className="h-3 w-3 text-blue-600" />
                        <span className="text-xs font-medium text-blue-800">Recommended:</span>
                      </div>
                      <p className="text-xs text-blue-700 mb-1"><strong>375x812</strong> (iPhone) or</p>
                      <p className="text-xs text-blue-700 mb-2"><strong>360x800</strong> (Android)</p>
                      <p className="text-xs text-blue-600">Mobile viewport screenshot</p>
                    </div>
                  </div>
                </div>
              </FileUploadArea>
            )}
          </div>
        </div>
      </div>
      
      {/* Project Info */}
      <div className="mt-4 text-center">
        <h3 className="font-semibold text-gray-800">{block.content?.title || 'Mobile Website'}</h3>
        <p className="text-sm text-gray-600 mt-1">{block.content?.description || 'Responsive mobile experience'}</p>
        {block.content?.technologies && (
          <div className="mt-2 flex flex-wrap justify-center gap-1">
            {block.content.technologies.split(',').map((tech, index) => (
              <span key={index} className="px-2 py-1 bg-green-100 text-green-700 text-xs rounded-full">
                {tech.trim()}
              </span>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

// Mobile App Mockup Component  
const MobileAppMockup = ({ block, onUpdate, uploadFile, isEditing = false }) => {
  const handleScreenshotUpload = async (file) => {
    const uploadedFile = await uploadFile(file);
    onUpdate(block.id, { 
      content: { 
        ...block.content, 
        screenshot: uploadedFile.url
      }
    });
  };

  return (
    <div className="max-w-sm mx-auto">
      {/* Phone Frame */}
      <div className="bg-black rounded-[2.5rem] p-4 shadow-2xl">
        <div className="bg-black rounded-[2rem] overflow-hidden">
          {/* Status Bar */}
          <div className="text-white px-4 py-1 text-xs flex justify-between items-center">
            <span>9:41</span>
            <div className="flex items-center gap-1">
              <div className="w-4 h-2 border border-white rounded-sm">
                <div className="w-3/4 h-full bg-white rounded-sm"></div>
              </div>
            </div>
          </div>
          
          {/* App Content */}
          <div className="aspect-[9/16] relative">
            {block.content?.screenshot ? (
              <div className="relative w-full h-full">
                <img 
                  src={block.content.screenshot} 
                  alt="Mobile app screenshot"
                  className="w-full h-full object-cover"
                />
                {isEditing && (
                  <div className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
                    <FileUploadArea onFileUpload={handleScreenshotUpload}>
                      <button className="bg-black bg-opacity-50 text-white p-2 rounded-lg hover:bg-opacity-70">
                        <Upload className="h-3 w-3" />
                      </button>
                    </FileUploadArea>
                  </div>
                )}
              </div>
            ) : (
              <FileUploadArea onFileUpload={handleScreenshotUpload}>
                <div className="w-full h-full flex items-center justify-center bg-gray-900 border-2 border-dashed border-gray-600 hover:border-blue-400 transition-colors">
                  <div className="text-center px-4">
                    <Layers className="mx-auto h-12 w-12 text-gray-400 mb-3" />
                    <h4 className="text-sm font-medium text-gray-300 mb-2">Mobile App Screenshot</h4>
                    <div className="bg-blue-900 border border-blue-700 rounded-lg p-3 text-left">
                      <div className="flex items-center gap-2 mb-2">
                        <Info className="h-3 w-3 text-blue-400" />
                        <span className="text-xs font-medium text-blue-300">Recommended:</span>
                      </div>
                      <p className="text-xs text-blue-200 mb-1"><strong>375x812</strong> (iPhone) or</p>
                      <p className="text-xs text-blue-200 mb-2"><strong>360x800</strong> (Android)</p>
                      <p className="text-xs text-blue-400">Full screen app interface</p>
                      <div className="mt-2 pt-2 border-t border-blue-700">
                        <p className="text-xs text-blue-400"><strong>Tip:</strong> Export from Figma/XD at 2x resolution</p>
                      </div>
                    </div>
                  </div>
                </div>
              </FileUploadArea>
            )}
          </div>
        </div>
      </div>
      
      {/* App Info */}
      <div className="mt-4 text-center">
        <h3 className="font-semibold text-gray-800">{block.content?.title || 'Mobile App'}</h3>
        <p className="text-sm text-gray-600 mt-1">{block.content?.description || 'Native mobile application'}</p>
        <div className="mt-2 text-xs text-gray-500">
          <span className="bg-purple-100 text-purple-700 px-2 py-1 rounded-full">
            {block.content?.platform || 'iOS â€¢ Android'}
          </span>
        </div>
        {block.content?.technologies && (
          <div className="mt-2 flex flex-wrap justify-center gap-1">
            {block.content.technologies.split(',').map((tech, index) => (
              <span key={index} className="px-2 py-1 bg-purple-100 text-purple-700 text-xs rounded-full">
                {tech.trim()}
              </span>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

// Desktop App Mockup Component
const DesktopAppMockup = ({ block, onUpdate, uploadFile, isEditing = false }) => {
  const handleScreenshotUpload = async (file) => {
    const uploadedFile = await uploadFile(file);
    onUpdate(block.id, { 
      content: { 
        ...block.content, 
        screenshot: uploadedFile.url
      }
    });
  };

  return (
    <div className="max-w-4xl mx-auto">
      {/* Window Frame */}
      <div className="bg-gray-200 rounded-t-lg px-4 py-3 flex items-center justify-between">
        <div className="flex items-center gap-3">
          <div className="flex gap-2">
            <div className="w-3 h-3 bg-red-400 rounded-full"></div>
            <div className="w-3 h-3 bg-yellow-400 rounded-full"></div>
            <div className="w-3 h-3 bg-green-400 rounded-full"></div>
          </div>
          <span className="text-sm font-medium text-gray-700">{block.content?.title || 'Desktop Application'}</span>
        </div>
        <div className="flex items-center gap-2 text-gray-500">
          <Maximize className="h-4 w-4" />
        </div>
      </div>
      
      {/* App Content */}
      <div className="bg-white border border-gray-200 aspect-[16/10] relative overflow-hidden">
        {block.content?.screenshot ? (
          <div className="relative w-full h-full">
            <img 
              src={block.content.screenshot} 
              alt="Desktop app screenshot"
              className="w-full h-full object-cover object-top"
            />
            {isEditing && (
              <div className="absolute top-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity">
                <FileUploadArea onFileUpload={handleScreenshotUpload}>
                  <button className="bg-black bg-opacity-50 text-white p-2 rounded-lg hover:bg-opacity-70">
                    <Upload className="h-4 w-4" />
                  </button>
                </FileUploadArea>
              </div>
            )}
          </div>
        ) : (
          <FileUploadArea onFileUpload={handleScreenshotUpload}>
            <div className="w-full h-full flex items-center justify-center bg-gray-50 border-2 border-dashed border-gray-300 hover:border-blue-400 transition-colors">
              <div className="text-center">
                <Code className="mx-auto h-16 w-16 text-gray-400 mb-4" />
                <h3 className="text-lg font-medium text-gray-700 mb-2">Upload Desktop App Screenshot</h3>
                <div className="bg-purple-50 border border-purple-200 rounded-lg p-4 max-w-sm mx-auto">
                  <div className="flex items-center gap-2 mb-2">
                    <Info className="h-4 w-4 text-purple-600" />
                    <span className="text-sm font-medium text-purple-800">Recommended Size:</span>
                  </div>
                  <p className="text-sm text-purple-700 mb-1"><strong>1440x900</strong> or <strong>1920x1080</strong> pixels</p>
                  <p className="text-xs text-purple-600">Full application window capture</p>
                  <div className="mt-3 pt-3 border-t border-purple-200">
                    <p className="text-xs text-purple-600"><strong>Example:</strong> Screenshot your entire app window including title bar and interface</p>
                  </div>
                </div>
              </div>
            </div>
          </FileUploadArea>
        )}
      </div>
      
      {/* App Info */}
      <div className="bg-gray-50 rounded-b-lg p-4 border-t border-gray-200">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="font-semibold text-gray-800">{block.content?.title || 'Desktop Application'}</h3>
            <p className="text-sm text-gray-600">{block.content?.description || 'Cross-platform desktop application'}</p>
          </div>
          <div className="text-right">
            <div className="text-xs text-gray-500 uppercase tracking-wide">Platform</div>
            <div className="text-sm font-medium text-gray-700">{block.content?.platform || 'Windows â€¢ Mac â€¢ Linux'}</div>
          </div>
        </div>
        {block.content?.technologies && (
          <div className="mt-3 flex flex-wrap gap-2">
            {block.content.technologies.split(',').map((tech, index) => (
              <span key={index} className="px-2 py-1 bg-purple-100 text-purple-700 text-xs rounded-full">
                {tech.trim()}
              </span>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

// PDF Page Component for displaying individual pages
const PDFPageDisplay = ({ pages, currentPage, onPageChange, totalPages }) => {
  if (!pages || pages.length === 0) return null;

  return (
    <div className="relative">
      <img 
        src={pages[currentPage]} 
        alt={`Page ${currentPage + 1}`}
        className="w-full h-auto"
      />
      
      {totalPages > 1 && (
        <div className="absolute bottom-2 left-1/2 transform -translate-x-1/2 bg-black bg-opacity-70 text-white rounded-full px-3 py-1 text-xs flex items-center gap-2">
          <button
            onClick={() => onPageChange(Math.max(0, currentPage - 1))}
            disabled={currentPage === 0}
            className="p-1 hover:bg-white hover:bg-opacity-20 rounded disabled:opacity-50"
          >
            <ChevronLeft className="h-3 w-3" />
          </button>
          <span>{currentPage + 1} / {totalPages}</span>
          <button
            onClick={() => onPageChange(Math.min(totalPages - 1, currentPage + 1))}
            disabled={currentPage === totalPages - 1}
            className="p-1 hover:bg-white hover:bg-opacity-20 rounded disabled:opacity-50"
          >
            <ChevronRight className="h-3 w-3" />
          </button>
        </div>
      )}
    </div>
  );
};

// Tri-fold Brochure Mockup Component
const TriFoldBrochureMockup = ({ block, onUpdate, uploadFile }) => {
  const [currentPage, setCurrentPage] = useState(0);
  
  const handlePDFUpload = async (file) => {
    if (file.type !== 'application/pdf') {
      alert('Please upload a PDF file');
      return;
    }
    
    const uploadedFile = await uploadFile(file);
    // In a real implementation, you'd convert PDF pages to images here
    // For now, we'll simulate with placeholder pages
    const mockPages = [uploadedFile.url, uploadedFile.url + '?page=2', uploadedFile.url + '?page=3'];
    
    onUpdate(block.id, { 
      content: { 
        ...block.content, 
        pdfUrl: uploadedFile.url,
        pages: mockPages
      }
    });
  };

  return (
    <div className="max-w-4xl mx-auto">
      <div className="relative">
        {/* 3D Brochure Mockup */}
        <div className="relative bg-gradient-to-br from-gray-100 to-gray-200 rounded-lg p-8 shadow-2xl">
          {block.content?.pages?.length > 0 ? (
            <div className="flex gap-1" style={{ transform: 'perspective(1000px) rotateY(-15deg)' }}>
              {/* Left Panel */}
              <div className="w-1/3 bg-white shadow-lg transform -skew-y-1">
                <PDFPageDisplay 
                  pages={[block.content.pages[0]]} 
                  currentPage={0}
                  totalPages={1}
                />
              </div>
              {/* Center Panel */}
              <div className="w-1/3 bg-white shadow-lg">
                <PDFPageDisplay 
                  pages={block.content.pages.slice(1, 2)} 
                  currentPage={0}
                  totalPages={1}
                />
              </div>
              {/* Right Panel */}
              <div className="w-1/3 bg-white shadow-lg transform skew-y-1">
                <PDFPageDisplay 
                  pages={block.content.pages.slice(2, 3)} 
                  currentPage={0}
                  totalPages={1}
                />
              </div>
            </div>
          ) : (
            <FileUploadArea onFileUpload={handlePDFUpload}>
              <div className="aspect-[3/1] flex items-center justify-center bg-white border-2 border-dashed border-gray-300 hover:border-blue-400 transition-colors rounded-lg" style={{ transform: 'perspective(1000px) rotateY(-15deg)' }}>
                <div className="text-center transform" style={{ transform: 'rotateY(15deg)' }}>
                  <PanelLeftOpen className="mx-auto h-16 w-16 text-gray-400 mb-4" />
                  <h3 className="text-lg font-medium text-gray-700 mb-2">Upload Tri-fold Brochure PDF</h3>
                  <div className="bg-orange-50 border border-orange-200 rounded-lg p-4 max-w-sm mx-auto">
                    <div className="flex items-center gap-2 mb-2">
                      <Info className="h-4 w-4 text-orange-600" />
                      <span className="text-sm font-medium text-orange-800">Recommended Format:</span>
                    </div>
                    <p className="text-sm text-orange-700 mb-1"><strong>11" x 8.5"</strong> (landscape) tri-fold</p>
                    <p className="text-xs text-orange-600">300 DPI PDF with bleed</p>
                    <div className="mt-3 pt-3 border-t border-orange-200">
                      <p className="text-xs text-orange-600"><strong>Example:</strong> Export 3-panel brochure as single PDF from InDesign/Illustrator</p>
                    </div>
                  </div>
                </div>
              </div>
            </FileUploadArea>
          )}
        </div>
      </div>
      
      {/* Project Info */}
      <div className="mt-6 bg-white rounded-lg shadow-sm p-6">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="font-semibold text-gray-800">{block.content?.title || 'Tri-fold Brochure'}</h3>
            <p className="text-sm text-gray-600 mt-1">{block.content?.description || 'Professional marketing brochure design'}</p>
          </div>
          <div className="text-right">
            <div className="text-xs text-gray-500 uppercase tracking-wide">Print Type</div>
            <div className="text-sm font-medium text-gray-700">Tri-fold Brochure</div>
          </div>
        </div>
        {block.content?.specifications && (
          <div className="mt-3 text-xs text-gray-500">
            <strong>Specifications:</strong> {block.content.specifications}
          </div>
        )}
      </div>
    </div>
  );
};

// Bound Catalog/Book Mockup Component
const BoundCatalogMockup = ({ block, onUpdate, uploadFile }) => {
  const [currentPage, setCurrentPage] = useState(0);
  
  const handlePDFUpload = async (file) => {
    if (file.type !== 'application/pdf') {
      alert('Please upload a PDF file');
      return;
    }
    
    const uploadedFile = await uploadFile(file);
    // Simulate multiple pages
    const mockPages = Array.from({ length: 8 }, (_, i) => uploadedFile.url + `?page=${i + 1}`);
    
    onUpdate(block.id, { 
      content: { 
        ...block.content, 
        pdfUrl: uploadedFile.url,
        pages: mockPages
      }
    });
  };

  const totalPages = block.content?.pages?.length || 0;

  return (
    <div className="max-w-3xl mx-auto">
      <div className="relative">
        {/* 3D Book Mockup */}
        <div className="relative bg-gradient-to-br from-gray-100 to-gray-200 rounded-lg p-8 shadow-2xl">
          {totalPages > 0 ? (
            <div className="relative" style={{ transform: 'perspective(1000px) rotateY(-25deg)' }}>
              {/* Book Spine */}
              <div className="absolute left-0 top-0 w-6 h-full bg-gray-800 shadow-lg transform -skew-y-2 z-10"></div>
              
              {/* Book Cover/Pages */}
              <div className="bg-white shadow-2xl ml-4 relative">
                <PDFPageDisplay 
                  pages={block.content.pages} 
                  currentPage={currentPage}
                  onPageChange={setCurrentPage}
                  totalPages={totalPages}
                />
                
                {/* Page Stack Effect */}
                <div className="absolute -right-1 -bottom-1 w-full h-full bg-gray-100 -z-10 shadow-lg"></div>
                <div className="absolute -right-2 -bottom-2 w-full h-full bg-gray-200 -z-20 shadow-lg"></div>
              </div>
            </div>
          ) : (
            <FileUploadArea onFileUpload={handlePDFUpload}>
              <div className="aspect-[4/5] flex items-center justify-center bg-white border-2 border-dashed border-gray-300 hover:border-blue-400 transition-colors rounded-lg" style={{ transform: 'perspective(1000px) rotateY(-25deg)' }}>
                <div className="text-center transform" style={{ transform: 'rotateY(25deg)' }}>
                  <Book className="mx-auto h-16 w-16 text-gray-400 mb-4" />
                  <h3 className="text-lg font-medium text-gray-700 mb-2">Upload Catalog/Book PDF</h3>
                  <div className="bg-green-50 border border-green-200 rounded-lg p-4 max-w-sm mx-auto">
                    <div className="flex items-center gap-2 mb-2">
                      <Info className="h-4 w-4 text-green-600" />
                      <span className="text-sm font-medium text-green-800">Recommended Format:</span>
                    </div>
                    <p className="text-sm text-green-700 mb-1"><strong>8.5" x 11"</strong> or <strong>A4</strong></p>
                    <p className="text-xs text-green-600">Multi-page PDF, 300 DPI</p>
                    <div className="mt-3 pt-3 border-t border-green-200">
                      <p className="text-xs text-green-600"><strong>Example:</strong> Complete catalog with cover and interior pages</p>
                    </div>
                  </div>
                </div>
              </div>
            </FileUploadArea>
          )}
        </div>
      </div>
      
      {/* Project Info */}
      <div className="mt-6 bg-white rounded-lg shadow-sm p-6">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="font-semibold text-gray-800">{block.content?.title || 'Bound Catalog'}</h3>
            <p className="text-sm text-gray-600 mt-1">{block.content?.description || 'Perfect bound catalog with professional finish'}</p>
          </div>
          <div className="text-right">
            <div className="text-xs text-gray-500 uppercase tracking-wide">Pages</div>
            <div className="text-sm font-medium text-gray-700">{totalPages} pages</div>
          </div>
        </div>
        {block.content?.specifications && (
          <div className="mt-3 flex flex-wrap gap-2">
            {block.content.specifications.split(',').map((spec, index) => (
              <span key={index} className="px-2 py-1 bg-green-100 text-green-700 text-xs rounded-full">
                {spec.trim()}
              </span>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

// Saddle-Stitched Catalog Mockup Component
const SaddleStitchedMockup = ({ block, onUpdate, uploadFile }) => {
  const [currentPage, setCurrentPage] = useState(0);
  
  const handlePDFUpload = async (file) => {
    if (file.type !== 'application/pdf') {
      alert('Please upload a PDF file');
      return;
    }
    
    const uploadedFile = await uploadFile(file);
    const mockPages = Array.from({ length: 12 }, (_, i) => uploadedFile.url + `?page=${i + 1}`);
    
    onUpdate(block.id, { 
      content: { 
        ...block.content, 
        pdfUrl: uploadedFile.url,
        pages: mockPages
      }
    });
  };

  const totalPages = block.content?.pages?.length || 0;

  return (
    <div className="max-w-3xl mx-auto">
      <div className="relative">
        {/* Open Magazine/Catalog View */}
        <div className="relative bg-gradient-to-br from-gray-100 to-gray-200 rounded-lg p-8 shadow-2xl">
          {totalPages > 0 ? (
            <div className="flex gap-2" style={{ transform: 'perspective(1000px) rotateX(10deg)' }}>
              {/* Left Page */}
              <div className="flex-1 bg-white shadow-lg transform -rotate-1">
                <PDFPageDisplay 
                  pages={block.content.pages.filter((_, i) => i % 2 === 0)} 
                  currentPage={Math.floor(currentPage / 2)}
                  onPageChange={(page) => setCurrentPage(page * 2)}
                  totalPages={Math.ceil(totalPages / 2)}
                />
              </div>
              {/* Center Binding */}
              <div className="w-2 bg-gray-300 shadow-inner"></div>
              {/* Right Page */}
              <div className="flex-1 bg-white shadow-lg transform rotate-1">
                <PDFPageDisplay 
                  pages={block.content.pages.filter((_, i) => i % 2 === 1)} 
                  currentPage={Math.floor(currentPage / 2)}
                  totalPages={Math.floor(totalPages / 2)}
                />
              </div>
            </div>
          ) : (
            <FileUploadArea onFileUpload={handlePDFUpload}>
              <div className="aspect-[2/1] flex items-center justify-center bg-white border-2 border-dashed border-gray-300 hover:border-blue-400 transition-colors rounded-lg" style={{ transform: 'perspective(1000px) rotateX(10deg)' }}>
                <div className="text-center transform" style={{ transform: 'rotateX(-10deg)' }}>
                  <FileText className="mx-auto h-16 w-16 text-gray-400 mb-4" />
                  <h3 className="text-lg font-medium text-gray-700 mb-2">Upload Saddle-Stitched Catalog PDF</h3>
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 max-w-sm mx-auto">
                    <div className="flex items-center gap-2 mb-2">
                      <Info className="h-4 w-4 text-blue-600" />
                      <span className="text-sm font-medium text-blue-800">Recommended Format:</span>
                    </div>
                    <p className="text-sm text-blue-700 mb-1"><strong>8.5" x 11"</strong> spreads</p>
                    <p className="text-xs text-blue-600">Multiple of 4 pages, 300 DPI</p>
                    <div className="mt-3 pt-3 border-t border-blue-200">
                      <p className="text-xs text-blue-600"><strong>Example:</strong> 8, 12, or 16-page saddle-stitched booklet</p>
                    </div>
                  </div>
                </div>
              </div>
            </FileUploadArea>
          )}
        </div>
      </div>
      
      {/* Project Info */}
      <div className="mt-6 bg-white rounded-lg shadow-sm p-6">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="font-semibold text-gray-800">{block.content?.title || 'Saddle-Stitched Catalog'}</h3>
            <p className="text-sm text-gray-600 mt-1">{block.content?.description || 'Cost-effective booklet with center-fold binding'}</p>
          </div>
          <div className="text-right">
            <div className="text-xs text-gray-500 uppercase tracking-wide">Binding</div>
            <div className="text-sm font-medium text-gray-700">Saddle-Stitched</div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Poster/Promotional Material Mockup Component
const PosterMockup = ({ block, onUpdate, uploadFile }) => {
  const handlePDFUpload = async (file) => {
    if (file.type !== 'application/pdf') {
      alert('Please upload a PDF file');
      return;
    }
    
    const uploadedFile = await uploadFile(file);
    onUpdate(block.id, { 
      content: { 
        ...block.content, 
        pdfUrl: uploadedFile.url,
        pages: [uploadedFile.url]
      }
    });
  };

  return (
    <div className="max-w-2xl mx-auto">
      <div className="relative">
        {/* 3D Poster Mockup */}
        <div className="relative bg-gradient-to-br from-gray-100 to-gray-200 rounded-lg p-8 shadow-2xl">
          {block.content?.pages?.length > 0 ? (
            <div className="relative" style={{ transform: 'perspective(1000px) rotateX(5deg) rotateY(-10deg)' }}>
              <div className="bg-white shadow-2xl">
                <PDFPageDisplay 
                  pages={block.content.pages} 
                  currentPage={0}
                  totalPages={1}
                />
              </div>
              {/* Shadow effect */}
              <div className="absolute top-4 left-4 w-full h-full bg-black opacity-20 -z-10 blur-sm"></div>
            </div>
          ) : (
            <FileUploadArea onFileUpload={handlePDFUpload}>
              <div className="aspect-[3/4] flex items-center justify-center bg-white border-2 border-dashed border-gray-300 hover:border-blue-400 transition-colors rounded-lg shadow-lg" style={{ transform: 'perspective(1000px) rotateX(5deg) rotateY(-10deg)' }}>
                <div className="text-center transform" style={{ transform: 'rotateY(10deg) rotateX(-5deg)' }}>
                  <Printer className="mx-auto h-16 w-16 text-gray-400 mb-4" />
                  <h3 className="text-lg font-medium text-gray-700 mb-2">Upload Poster/Flyer PDF</h3>
                  <div className="bg-red-50 border border-red-200 rounded-lg p-4 max-w-sm mx-auto">
                    <div className="flex items-center gap-2 mb-2">
                      <Info className="h-4 w-4 text-red-600" />
                      <span className="text-sm font-medium text-red-800">Recommended Sizes:</span>
                    </div>
                    <p className="text-sm text-red-700 mb-1"><strong>18" x 24"</strong> poster</p>
                    <p className="text-sm text-red-700 mb-1"><strong>11" x 17"</strong> tabloid</p>
                    <p className="text-xs text-red-600">300 DPI with bleed areas</p>
                    <div className="mt-3 pt-3 border-t border-red-200">
                      <p className="text-xs text-red-600"><strong>Example:</strong> Event poster, product flyer, or promotional material</p>
                    </div>
                  </div>
                </div>
              </div>
            </FileUploadArea>
          )}
        </div>
      </div>
      
      {/* Project Info */}
      <div className="mt-6 bg-white rounded-lg shadow-sm p-6">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="font-semibold text-gray-800">{block.content?.title || 'Promotional Poster'}</h3>
            <p className="text-sm text-gray-600 mt-1">{block.content?.description || 'Eye-catching promotional design for maximum impact'}</p>
          </div>
          <div className="text-right">
            <div className="text-xs text-gray-500 uppercase tracking-wide">Format</div>
            <div className="text-sm font-medium text-gray-700">{block.content?.format || 'Large Format Print'}</div>
          </div>
        </div>
        {block.content?.materials && (
          <div className="mt-3 flex flex-wrap gap-2">
            {block.content.materials.split(',').map((material, index) => (
              <span key={index} className="px-2 py-1 bg-red-100 text-red-700 text-xs rounded-full">
                {material.trim()}
              </span>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

// File Upload Hook
const useFileUpload = () => {
  const [uploadedFiles, setUploadedFiles] = useState({});
  
  const uploadFile = useCallback((file) => {
    return new Promise((resolve) => {
      const reader = new FileReader();
      reader.onload = (e) => {
        const fileData = {
          id: Date.now().toString(),
          name: file.name,
          size: file.size,
          type: file.type,
          url: e.target.result,
          uploadedAt: new Date()
        };
        setUploadedFiles(prev => ({ ...prev, [fileData.id]: fileData }));
        resolve(fileData);
      };
      reader.readAsDataURL(file);
    });
  }, []);

  return { uploadedFiles, uploadFile };
};

// Mobile-optimized Text Editor Modal
const TextEditorModal = ({ isOpen, content, onSave, onClose, placeholder }) => {
  const [localContent, setLocalContent] = useState(content || '');
  const editorRef = useRef(null);
  const isMobile = useIsMobile();

  useEffect(() => {
    if (isOpen) {
      setLocalContent(content || '');
    }
  }, [isOpen, content]);

  const handleCommand = (command, value = null) => {
    document.execCommand(command, false, value);
    if (editorRef.current) {
      setLocalContent(editorRef.current.innerHTML);
    }
  };

  const handleSave = () => {
    onSave(localContent);
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-end md:items-center justify-center z-50">
      <div className={`bg-white rounded-t-lg md:rounded-lg shadow-xl w-full ${isMobile ? 'h-full' : 'max-w-2xl mx-4 max-h-[90vh]'}`}>
        <div className="p-4 border-b border-gray-200 flex items-center justify-between">
          <h3 className="text-lg font-semibold">Edit Content</h3>
          <button 
            onClick={onClose}
            className="md:hidden p-2 hover:bg-gray-100 rounded-full"
          >
            <X className="h-5 w-5" />
          </button>
        </div>
        
        {/* Mobile-optimized Formatting Toolbar */}
        <div className="p-4 border-b border-gray-200">
          <div className="grid grid-cols-6 md:flex md:items-center gap-2">
            <button
              onMouseDown={(e) => { e.preventDefault(); handleCommand('bold'); }}
              className="p-3 md:p-2 hover:bg-gray-100 rounded-lg touch-manipulation"
              title="Bold"
            >
              <Bold className="h-5 w-5 md:h-4 md:w-4" />
            </button>
            <button
              onMouseDown={(e) => { e.preventDefault(); handleCommand('italic'); }}
              className="p-3 md:p-2 hover:bg-gray-100 rounded-lg touch-manipulation"
              title="Italic"
            >
              <Italic className="h-5 w-5 md:h-4 md:w-4" />
            </button>
            <button
              onMouseDown={(e) => { e.preventDefault(); handleCommand('underline'); }}
              className="p-3 md:p-2 hover:bg-gray-100 rounded-lg touch-manipulation"
              title="Underline"
            >
              <Underline className="h-5 w-5 md:h-4 md:w-4" />
            </button>
            
            <button
              onMouseDown={(e) => { e.preventDefault(); handleCommand('justifyLeft'); }}
              className="p-3 md:p-2 hover:bg-gray-100 rounded-lg touch-manipulation"
              title="Align Left"
            >
              <AlignLeft className="h-5 w-5 md:h-4 md:w-4" />
            </button>
            <button
              onMouseDown={(e) => { e.preventDefault(); handleCommand('justifyCenter'); }}
              className="p-3 md:p-2 hover:bg-gray-100 rounded-lg touch-manipulation"
              title="Align Center"
            >
              <AlignCenter className="h-5 w-5 md:h-4 md:w-4" />
            </button>
            <button
              onMouseDown={(e) => { e.preventDefault(); handleCommand('justifyRight'); }}
              className="p-3 md:p-2 hover:bg-gray-100 rounded-lg touch-manipulation"
              title="Align Right"
            >
              <AlignRight className="h-5 w-5 md:h-4 md:w-4" />
            </button>
            
            <button
              onMouseDown={(e) => { e.preventDefault(); handleCommand('insertUnorderedList'); }}
              className="p-3 md:p-2 hover:bg-gray-100 rounded-lg touch-manipulation"
              title="Bullet List"
            >
              <List className="h-5 w-5 md:h-4 md:w-4" />
            </button>
            <button
              onMouseDown={(e) => { e.preventDefault(); handleCommand('insertOrderedList'); }}
              className="p-3 md:p-2 hover:bg-gray-100 rounded-lg touch-manipulation"
              title="Numbered List"
            >
              <ListOrdered className="h-5 w-5 md:h-4 md:w-4" />
            </button>
          </div>
        </div>

        {/* Editor */}
        <div className="p-4 flex-1 overflow-y-auto">
          <div
            ref={editorRef}
            contentEditable
            suppressContentEditableWarning={true}
            onInput={(e) => setLocalContent(e.target.innerHTML)}
            className={`border border-gray-300 rounded-lg p-4 outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 ${isMobile ? 'min-h-[200px] text-base' : 'min-h-[150px] text-sm'}`}
            style={{ caretColor: '#3b82f6' }}
            dangerouslySetInnerHTML={{ __html: localContent }}
          />
          {!localContent && (
            <div className="absolute inset-4 text-gray-400 pointer-events-none flex items-start pt-4">
              {placeholder || "Enter your text here..."}
            </div>
          )}
        </div>

        {/* Footer */}
        <div className={`p-4 border-t border-gray-200 ${isMobile ? 'pb-safe' : ''}`}>
          <div className="flex gap-2">
            <button
              onClick={onClose}
              className="flex-1 md:flex-none px-6 py-3 md:py-2 border border-gray-300 rounded-lg hover:bg-gray-50 font-medium touch-manipulation"
            >
              Cancel
            </button>
            <button
              onClick={handleSave}
              className="flex-1 md:flex-none px-6 py-3 md:py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium touch-manipulation"
            >
              Save Changes
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// File Upload Component
const FileUploadArea = ({ onFileUpload, accept = "image/*", children }) => {
  const fileInputRef = useRef(null);
  const [isDragOver, setIsDragOver] = useState(false);

  const handleDragOver = (e) => {
    e.preventDefault();
    setIsDragOver(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    setIsDragOver(false);
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setIsDragOver(false);
    const files = Array.from(e.dataTransfer.files);
    files.forEach(onFileUpload);
  };

  const handleFileSelect = (e) => {
    const files = Array.from(e.target.files);
    files.forEach(onFileUpload);
  };

  return (
    <div
      className={`relative cursor-pointer transition-colors touch-manipulation ${isDragOver ? 'bg-blue-50' : ''}`}
      onDragOver={handleDragOver}
      onDragLeave={handleDragLeave}
      onDrop={handleDrop}
      onClick={() => fileInputRef.current?.click()}
    >
      <input
        ref={fileInputRef}
        type="file"
        accept={accept}
        multiple
        onChange={handleFileSelect}
        className="hidden"
      />
      {children}
    </div>
  );
};

// Mobile-optimized Gallery Manager
const GalleryManager = ({ images = [], onImagesChange }) => {
  const { uploadFile } = useFileUpload();

  const handleFileUpload = async (file) => {
    const uploadedFile = await uploadFile(file);
    onImagesChange([...images, uploadedFile]);
  };

  const removeImage = (index) => {
    onImagesChange(images.filter((_, i) => i !== index));
  };

  return (
    <div className="space-y-4">
      <FileUploadArea onFileUpload={handleFileUpload}>
        <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 md:p-4 text-center hover:border-blue-400 transition-colors">
          <Upload className="mx-auto h-10 w-10 md:h-8 md:w-8 text-gray-400 mb-2" />
          <p className="text-base md:text-sm text-gray-600">Tap to upload images</p>
        </div>
      </FileUploadArea>
      
      <div className="grid grid-cols-2 md:grid-cols-3 gap-3 md:gap-2">
        {images.map((image, index) => (
          <div key={index} className="relative group">
            <img 
              src={image.url} 
              alt={image.name}
              className="w-full h-24 md:h-20 object-cover rounded-lg"
            />
            <button
              onClick={(e) => {
                e.stopPropagation();
                removeImage(index);
              }}
              className="absolute top-1 right-1 bg-red-500 text-white rounded-full p-2 md:p-1 touch-manipulation"
            >
              <Trash2 className="h-4 w-4 md:h-3 md:w-3" />
            </button>
          </div>
        ))}
      </div>
    </div>
  );
};

// Mobile-optimized Block Component
const Block = ({ 
  block, 
  isSelected, 
  onSelect, 
  onUpdate, 
  onDelete, 
  onDuplicate, 
  uploadFile,
  onMoveUp,
  onMoveDown,
  canMoveUp,
  canMoveDown
}) => {
  const [showTextEditor, setShowTextEditor] = useState(false);
  const [editingField, setEditingField] = useState(null);
  const isMobile = useIsMobile();

  const handleContentChange = (newContent, field = null) => {
    if (block.type === BLOCK_TYPES.HERO) {
      onUpdate(block.id, { 
        content: { ...block.content, [field]: newContent }
      });
    } else {
      onUpdate(block.id, { content: newContent });
    }
  };

  const handleImageUpload = async (file) => {
    const uploadedFile = await uploadFile(file);
    onUpdate(block.id, { src: uploadedFile.url, alt: uploadedFile.name });
  };

  const openTextEditor = (field = null) => {
    setEditingField(field);
    setShowTextEditor(true);
  };

  const getEditableContent = () => {
    if (block.type === BLOCK_TYPES.HERO && editingField) {
      return block.content?.[editingField] || '';
    } else if ((block.type === BLOCK_TYPES.SOCIAL_POST || block.type === BLOCK_TYPES.SOCIAL_CAROUSEL) && editingField === 'caption') {
      return block.content?.caption || '';
    } else if (block.type === BLOCK_TYPES.SOCIAL_STORY && editingField === 'storyText') {
      return block.content?.storyText || '';
    } else if ((block.type === BLOCK_TYPES.WEBSITE_DESKTOP || 
                block.type === BLOCK_TYPES.WEBSITE_MOBILE ||
                block.type === BLOCK_TYPES.APP_MOBILE ||
                block.type === BLOCK_TYPES.APP_DESKTOP) && editingField === 'title') {
      // For mockup blocks, return a formatted string with all editable fields
      const content = block.content || {};
      return `Title: ${content.title || ''}\nDescription: ${content.description || ''}\nURL/Platform: ${content.url || content.platform || ''}\nTechnologies: ${content.technologies || ''}`;
    } else if ((block.type === BLOCK_TYPES.PRINT_TRIFOLD ||
                block.type === BLOCK_TYPES.PRINT_CATALOG ||
                block.type === BLOCK_TYPES.PRINT_BOOK ||
                block.type === BLOCK_TYPES.PRINT_POSTER) && editingField === 'title') {
      // For print blocks
      const content = block.content || {};
      const extraField = block.type === BLOCK_TYPES.PRINT_TRIFOLD ? 'Specifications' : 
                        block.type === BLOCK_TYPES.PRINT_CATALOG ? 'Specifications' :
                        block.type === BLOCK_TYPES.PRINT_POSTER ? 'Materials' : 'Specifications';
      return `Title: ${content.title || ''}\nDescription: ${content.description || ''}\n${extraField}: ${content.specifications || content.materials || ''}`;
    }
    return block.content || '';
  };

  const saveTextChanges = (newContent) => {
    if (block.type === BLOCK_TYPES.HERO && editingField) {
      handleContentChange(newContent, editingField);
    } else if ((block.type === BLOCK_TYPES.SOCIAL_POST || block.type === BLOCK_TYPES.SOCIAL_CAROUSEL) && editingField === 'caption') {
      onUpdate(block.id, {
        content: { ...block.content, caption: newContent }
      });
    } else if (block.type === BLOCK_TYPES.SOCIAL_STORY && editingField === 'storyText') {
      onUpdate(block.id, {
        content: { ...block.content, storyText: newContent }
      });
    } else if ((block.type === BLOCK_TYPES.WEBSITE_DESKTOP || 
                block.type === BLOCK_TYPES.WEBSITE_MOBILE ||
                block.type === BLOCK_TYPES.APP_MOBILE ||
                block.type === BLOCK_TYPES.APP_DESKTOP) && editingField === 'title') {
      // Parse the formatted text back into individual fields
      const lines = newContent.split('\n');
      const updatedContent = { ...block.content };
      
      lines.forEach(line => {
        if (line.startsWith('Title: ')) updatedContent.title = line.replace('Title: ', '').trim();
        else if (line.startsWith('Description: ')) updatedContent.description = line.replace('Description: ', '').trim();
        else if (line.startsWith('URL/Platform: ')) {
          const value = line.replace('URL/Platform: ', '').trim();
          if (block.type === BLOCK_TYPES.WEBSITE_DESKTOP || block.type === BLOCK_TYPES.WEBSITE_MOBILE) {
            updatedContent.url = value;
          } else {
            updatedContent.platform = value;
          }
        }
        else if (line.startsWith('Technologies: ')) updatedContent.technologies = line.replace('Technologies: ', '').trim();
      });
      
      onUpdate(block.id, { content: updatedContent });
    } else if ((block.type === BLOCK_TYPES.PRINT_TRIFOLD ||
                block.type === BLOCK_TYPES.PRINT_CATALOG ||
                block.type === BLOCK_TYPES.PRINT_BOOK ||
                block.type === BLOCK_TYPES.PRINT_POSTER) && editingField === 'title') {
      // Parse print block fields
      const lines = newContent.split('\n');
      const updatedContent = { ...block.content };
      
      lines.forEach(line => {
        if (line.startsWith('Title: ')) updatedContent.title = line.replace('Title: ', '').trim();
        else if (line.startsWith('Description: ')) updatedContent.description = line.replace('Description: ', '').trim();
        else if (line.startsWith('Specifications: ')) updatedContent.specifications = line.replace('Specifications: ', '').trim();
        else if (line.startsWith('Materials: ')) updatedContent.materials = line.replace('Materials: ', '').trim();
      });
      
      onUpdate(block.id, { content: updatedContent });
    } else {
      handleContentChange(newContent);
    }
  };

  const renderBlockContent = () => {
    const commonStyles = {
      ...block.styles,
      position: 'relative',
      minHeight: block.type === BLOCK_TYPES.TEXT ? '2rem' : 'auto'
    };

    switch (block.type) {
      case BLOCK_TYPES.HERO:
        return (
          <div style={commonStyles}>
            <div className="relative">
              {block.content?.backgroundImage && (
                <img 
                  src={block.content.backgroundImage}
                  alt="Hero background"
                  className="absolute inset-0 w-full h-full object-cover"
                />
              )}
              <div 
                className="relative z-10 p-4 md:p-8"
                style={{ backgroundColor: `rgba(0,0,0,${block.content?.overlayOpacity || 0})` }}
              >
                <div className="relative group">
                  <h1 className="text-3xl md:text-6xl font-bold mb-4">
                    <div dangerouslySetInnerHTML={{ __html: block.content?.title || 'Hero Title' }} />
                  </h1>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      openTextEditor('title');
                    }}
                    className={`absolute -top-2 -right-2 bg-blue-500 text-white p-2 md:p-1 rounded-lg touch-manipulation ${isMobile ? '' : 'opacity-0 group-hover:opacity-100'} transition-opacity`}
                    title="Edit Title"
                  >
                    <Edit3 className="h-4 w-4 md:h-3 md:w-3" />
                  </button>
                </div>
                
                <div className="relative group">
                  <p className="text-lg md:text-2xl opacity-90">
                    <div dangerouslySetInnerHTML={{ __html: block.content?.subtitle || 'Hero Subtitle' }} />
                  </p>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      openTextEditor('subtitle');
                    }}
                    className={`absolute -top-2 -right-2 bg-blue-500 text-white p-2 md:p-1 rounded-lg touch-manipulation ${isMobile ? '' : 'opacity-0 group-hover:opacity-100'} transition-opacity`}
                    title="Edit Subtitle"
                  >
                    <Edit3 className="h-4 w-4 md:h-3 md:w-3" />
                  </button>
                </div>
              </div>
            </div>
          </div>
        );
      
      case BLOCK_TYPES.HEADING:
        return (
          <div className="relative group">
            <h1 style={commonStyles}>
              <div dangerouslySetInnerHTML={{ __html: block.content || 'Heading' }} />
            </h1>
            <button
              onClick={(e) => {
                e.stopPropagation();
                openTextEditor();
              }}
              className={`absolute -top-2 -right-2 bg-blue-500 text-white p-3 md:p-2 rounded-lg touch-manipulation ${isMobile ? '' : 'opacity-0 group-hover:opacity-100'} transition-opacity`}
              title="Edit Text"
            >
              <Edit3 className="h-5 w-5 md:h-4 md:w-4" />
            </button>
          </div>
        );
      
      case BLOCK_TYPES.TEXT:
        return (
          <div className="relative group">
            <div style={commonStyles}>
              <div dangerouslySetInnerHTML={{ __html: block.content || 'Tap edit to add your text...' }} />
            </div>
            <button
              onClick={(e) => {
                e.stopPropagation();
                openTextEditor();
              }}
              className={`absolute -top-2 -right-2 bg-blue-500 text-white p-3 md:p-2 rounded-lg touch-manipulation ${isMobile ? '' : 'opacity-0 group-hover:opacity-100'} transition-opacity`}
              title="Edit Text"
            >
              <Edit3 className="h-5 w-5 md:h-4 md:w-4" />
            </button>
          </div>
        );
      
      case BLOCK_TYPES.QUOTE:
        return (
          <div className="relative group">
            <blockquote style={{...commonStyles, borderLeft: '4px solid #3b82f6', paddingLeft: '1rem', fontStyle: 'italic'}}>
              <div dangerouslySetInnerHTML={{ __html: block.content || '"Your quote here..."' }} />
            </blockquote>
            <button
              onClick={(e) => {
                e.stopPropagation();
                openTextEditor();
              }}
              className={`absolute -top-2 -right-2 bg-blue-500 text-white p-3 md:p-2 rounded-lg touch-manipulation ${isMobile ? '' : 'opacity-0 group-hover:opacity-100'} transition-opacity`}
              title="Edit Quote"
            >
              <Edit3 className="h-5 w-5 md:h-4 md:w-4" />
            </button>
          </div>
        );
      
      case BLOCK_TYPES.IMAGE:
        return (
          <div style={commonStyles}>
            {block.src ? (
              <div className="relative">
                <img 
                  src={block.src} 
                  alt={block.alt || 'Portfolio image'}
                  className="w-full h-auto rounded-lg"
                />
                <div className={`absolute top-2 right-2 ${isMobile ? '' : 'opacity-0 group-hover:opacity-100'} transition-opacity`}>
                  <FileUploadArea onFileUpload={handleImageUpload}>
                    <button className="bg-white bg-opacity-90 p-3 md:p-2 rounded-lg hover:bg-opacity-100 touch-manipulation">
                      <Upload className="h-5 w-5 md:h-4 md:w-4" />
                    </button>
                  </FileUploadArea>
                </div>
              </div>
            ) : (
              <FileUploadArea onFileUpload={handleImageUpload}>
                <div className="bg-gray-100 border-2 border-dashed border-gray-300 rounded-lg h-48 md:h-40 flex items-center justify-center hover:border-blue-400 transition-colors">
                  <div className="text-center">
                    <Image className="mx-auto h-12 w-12 md:h-10 md:w-10 text-gray-400" />
                    <p className="text-gray-500 mt-2 text-base md:text-sm">Tap to upload image</p>
                  </div>
                </div>
              </FileUploadArea>
            )}
          </div>
        );
      
      case BLOCK_TYPES.BUTTON:
        return (
          <div className="relative group">
            <button 
              style={{
                ...commonStyles,
                backgroundColor: block.styles?.backgroundColor || '#3b82f6',
                color: block.styles?.color || 'white',
                padding: isMobile ? '1rem 2rem' : '0.75rem 1.5rem',
                borderRadius: '0.5rem',
                border: 'none',
                fontSize: isMobile ? '1.1rem' : '1rem',
                fontWeight: '500',
                cursor: 'pointer'
              }}
            >
              <div dangerouslySetInnerHTML={{ __html: block.content || 'Button Text' }} />
            </button>
            <button
              onClick={(e) => {
                e.stopPropagation();
                openTextEditor();
              }}
              className={`absolute -top-2 -right-2 bg-blue-500 text-white p-3 md:p-2 rounded-lg touch-manipulation ${isMobile ? '' : 'opacity-0 group-hover:opacity-100'} transition-opacity`}
              title="Edit Button Text"
            >
              <Edit3 className="h-5 w-5 md:h-4 md:w-4" />
            </button>
          </div>
        );
      
      case BLOCK_TYPES.GALLERY:
        return (
          <div style={commonStyles}>
            <GalleryManager
              images={block.images || []}
              onImagesChange={(images) => onUpdate(block.id, { images })}
            />
          </div>
        );
      
      case BLOCK_TYPES.SPACER:
        return (
          <div 
            style={{
              ...commonStyles,
              height: block.height || '2rem',
              backgroundColor: isSelected ? '#f3f4f6' : 'transparent',
              border: isSelected ? '2px dashed #9ca3af' : '2px dashed transparent',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              minHeight: '2rem'
            }}
          >
            <span className="text-sm text-gray-500">Spacer - {block.height || '2rem'}</span>
          </div>
        );

      case BLOCK_TYPES.SOCIAL_POST:
        return (
          <div className="relative group" style={commonStyles}>
            <SocialMediaPost 
              block={block}
              onUpdate={onUpdate}
              uploadFile={uploadFile}
              isEditing={isSelected}
            />
            {isSelected && (
              <div className="absolute top-2 right-2 flex gap-2 z-10">
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    openTextEditor('caption');
                  }}
                  className="bg-blue-500 text-white p-2 rounded-lg hover:bg-blue-600 transition-colors"
                  title="Edit Caption"
                >
                  <Edit3 className="h-4 w-4" />
                </button>
              </div>
            )}
          </div>
        );

      case BLOCK_TYPES.SOCIAL_STORY:
        return (
          <div className="relative group" style={commonStyles}>
            <SocialMediaStory 
              block={block}
              onUpdate={onUpdate}
              uploadFile={uploadFile}
              isEditing={isSelected}
            />
            {isSelected && (
              <div className="absolute top-2 right-2 flex gap-2 z-10">
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    openTextEditor('storyText');
                  }}
                  className="bg-blue-500 text-white p-2 rounded-lg hover:bg-blue-600 transition-colors"
                  title="Edit Story Text"
                >
                  <Edit3 className="h-4 w-4" />
                </button>
              </div>
            )}
          </div>
        );

      case BLOCK_TYPES.SOCIAL_CAROUSEL:
        return (
          <div className="relative group" style={commonStyles}>
            <SocialMediaCarousel 
              block={block}
              onUpdate={onUpdate}
              uploadFile={uploadFile}
            />
            {isSelected && (
              <div className="absolute top-2 right-2 flex gap-2 z-10">
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    openTextEditor('caption');
                  }}
                  className="bg-blue-500 text-white p-2 rounded-lg hover:bg-blue-600 transition-colors"
                  title="Edit Caption"
                >
                  <Edit3 className="h-4 w-4" />
                </button>
              </div>
            )}
          </div>
        );

      case BLOCK_TYPES.WEBSITE_DESKTOP:
        return (
          <div className="relative group" style={commonStyles}>
            <DesktopWebsiteMockup 
              block={block}
              onUpdate={onUpdate}
              uploadFile={uploadFile}
              isEditing={isSelected}
            />
            {isSelected && (
              <div className="absolute top-2 right-2 flex gap-2 z-10">
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    openTextEditor('title');
                  }}
                  className="bg-blue-500 text-white p-2 rounded-lg hover:bg-blue-600 transition-colors"
                  title="Edit Project Details"
                >
                  <Edit3 className="h-4 w-4" />
                </button>
              </div>
            )}
          </div>
        );

      case BLOCK_TYPES.WEBSITE_MOBILE:
        return (
          <div className="relative group" style={commonStyles}>
            <MobileWebsiteMockup 
              block={block}
              onUpdate={onUpdate}
              uploadFile={uploadFile}
              isEditing={isSelected}
            />
            {isSelected && (
              <div className="absolute top-2 right-2 flex gap-2 z-10">
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    openTextEditor('title');
                  }}
                  className="bg-green-500 text-white p-2 rounded-lg hover:bg-green-600 transition-colors"
                  title="Edit Project Details"
                >
                  <Edit3 className="h-4 w-4" />
                </button>
              </div>
            )}
          </div>
        );

      case BLOCK_TYPES.APP_MOBILE:
        return (
          <div className="relative group" style={commonStyles}>
            <MobileAppMockup 
              block={block}
              onUpdate={onUpdate}
              uploadFile={uploadFile}
              isEditing={isSelected}
            />
            {isSelected && (
              <div className="absolute top-2 right-2 flex gap-2 z-10">
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    openTextEditor('title');
                  }}
                  className="bg-purple-500 text-white p-2 rounded-lg hover:bg-purple-600 transition-colors"
                  title="Edit App Details"
                >
                  <Edit3 className="h-4 w-4" />
                </button>
              </div>
            )}
          </div>
        );

      case BLOCK_TYPES.APP_DESKTOP:
        return (
          <div className="relative group" style={commonStyles}>
            <DesktopAppMockup 
              block={block}
              onUpdate={onUpdate}
              uploadFile={uploadFile}
              isEditing={isSelected}
            />
            {isSelected && (
              <div className="absolute top-2 right-2 flex gap-2 z-10">
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    openTextEditor('title');
                  }}
                  className="bg-purple-500 text-white p-2 rounded-lg hover:bg-purple-600 transition-colors"
                  title="Edit App Details"
                >
                  <Edit3 className="h-4 w-4" />
                </button>
              </div>
            )}
          </div>
        );

      case BLOCK_TYPES.PRINT_TRIFOLD:
        return (
          <div className="relative group" style={commonStyles}>
            <TriFoldBrochureMockup 
              block={block}
              onUpdate={onUpdate}
              uploadFile={uploadFile}
            />
            {isSelected && (
              <div className="absolute top-2 right-2 flex gap-2 z-10">
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    openTextEditor('title');
                  }}
                  className="bg-orange-500 text-white p-2 rounded-lg hover:bg-orange-600 transition-colors"
                  title="Edit Print Details"
                >
                  <Edit3 className="h-4 w-4" />
                </button>
              </div>
            )}
          </div>
        );

      case BLOCK_TYPES.PRINT_CATALOG:
        return (
          <div className="relative group" style={commonStyles}>
            <BoundCatalogMockup 
              block={block}
              onUpdate={onUpdate}
              uploadFile={uploadFile}
            />
            {isSelected && (
              <div className="absolute top-2 right-2 flex gap-2 z-10">
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    openTextEditor('title');
                  }}
                  className="bg-green-500 text-white p-2 rounded-lg hover:bg-green-600 transition-colors"
                  title="Edit Print Details"
                >
                  <Edit3 className="h-4 w-4" />
                </button>
              </div>
            )}
          </div>
        );

      case BLOCK_TYPES.PRINT_BOOK:
        return (
          <div className="relative group" style={commonStyles}>
            <SaddleStitchedMockup 
              block={block}
              onUpdate={onUpdate}
              uploadFile={uploadFile}
            />
            {isSelected && (
              <div className="absolute top-2 right-2 flex gap-2 z-10">
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    openTextEditor('title');
                  }}
                  className="bg-blue-500 text-white p-2 rounded-lg hover:bg-blue-600 transition-colors"
                  title="Edit Print Details"
                >
                  <Edit3 className="h-4 w-4" />
                </button>
              </div>
            )}
          </div>
        );

      case BLOCK_TYPES.PRINT_POSTER:
        return (
          <div className="relative group" style={commonStyles}>
            <PosterMockup 
              block={block}
              onUpdate={onUpdate}
              uploadFile={uploadFile}
            />
            {isSelected && (
              <div className="absolute top-2 right-2 flex gap-2 z-10">
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    openTextEditor('title');
                  }}
                  className="bg-red-500 text-white p-2 rounded-lg hover:bg-red-600 transition-colors"
                  title="Edit Print Details"
                >
                  <Edit3 className="h-4 w-4" />
                </button>
              </div>
            )}
          </div>
        );
      
      default:
        return <div style={commonStyles}>Unknown block type</div>;
    }
  };

  return (
    <>
      <div 
        className={`relative group transition-all duration-200 ${
          isSelected ? 'ring-2 ring-blue-500 ring-opacity-50' : ''
        }`}
        onClick={(e) => {
          e.stopPropagation();
          onSelect(block.id);
        }}
        style={{ 
          margin: isMobile ? '1rem 0' : '0.5rem 0',
          cursor: 'pointer'
        }}
      >
        {renderBlockContent()}
        
        {/* Mobile-optimized Layout Controls */}
        {isSelected && (
          <div className={`absolute ${isMobile ? '-left-16' : '-left-12'} top-1/2 transform -translate-y-1/2 flex flex-col gap-1 bg-white border border-gray-200 rounded-lg shadow-lg p-2 md:p-1`}>
            <button
              onClick={(e) => {
                e.stopPropagation();
                onMoveUp();
              }}
              disabled={!canMoveUp}
              className="p-2 md:p-1 hover:bg-gray-100 rounded disabled:opacity-50 disabled:cursor-not-allowed touch-manipulation"
              title="Move Up"
            >
              <ChevronUp className="h-5 w-5 md:h-4 md:w-4" />
            </button>
            <div className="w-5 h-5 md:w-4 md:h-4 flex items-center justify-center">
              <GripVertical className="h-4 w-4 md:h-3 md:w-3 text-gray-400" />
            </div>
            <button
              onClick={(e) => {
                e.stopPropagation();
                onMoveDown();
              }}
              disabled={!canMoveDown}
              className="p-2 md:p-1 hover:bg-gray-100 rounded disabled:opacity-50 disabled:cursor-not-allowed touch-manipulation"
              title="Move Down"
            >
              <ChevronDown className="h-5 w-5 md:h-4 md:w-4" />
            </button>
          </div>
        )}
        
        {/* Mobile-optimized Block Controls */}
        {isSelected && (
          <div className={`absolute ${isMobile ? '-top-16' : '-top-12'} left-1/2 transform -translate-x-1/2 bg-white border border-gray-200 rounded-lg shadow-lg p-2 flex items-center gap-2 z-20`}>
            <button 
              className="p-2 md:p-1 hover:bg-gray-100 rounded touch-manipulation"
              onClick={(e) => {
                e.stopPropagation();
                onDuplicate(block.id);
              }}
              title="Duplicate Block"
            >
              <Copy className="h-5 w-5 md:h-4 md:w-4" />
            </button>
            <button 
              className="p-2 md:p-1 hover:bg-gray-100 rounded text-red-600 touch-manipulation"
              onClick={(e) => {
                e.stopPropagation();
                onDelete(block.id);
              }}
              title="Delete Block"
            >
              <Trash2 className="h-5 w-5 md:h-4 md:w-4" />
            </button>
          </div>
        )}
      </div>

      {/* Text Editor Modal */}
      <TextEditorModal
        isOpen={showTextEditor}
        content={getEditableContent()}
        onSave={saveTextChanges}
        onClose={() => {
          setShowTextEditor(false);
          setEditingField(null);
        }}
        placeholder={
          block.type === BLOCK_TYPES.HERO && editingField === 'title' ? "Hero title..." :
          block.type === BLOCK_TYPES.HERO && editingField === 'subtitle' ? "Hero subtitle..." :
          block.type === BLOCK_TYPES.HEADING ? "Heading text..." :
          block.type === BLOCK_TYPES.QUOTE ? "Your quote..." :
          block.type === BLOCK_TYPES.BUTTON ? "Button text..." :
          (block.type === BLOCK_TYPES.SOCIAL_POST || block.type === BLOCK_TYPES.SOCIAL_CAROUSEL) && editingField === 'caption' ? "Write your social media caption..." :
          block.type === BLOCK_TYPES.SOCIAL_STORY && editingField === 'storyText' ? "Add text overlay for your story..." :
          (block.type === BLOCK_TYPES.WEBSITE_DESKTOP || block.type === BLOCK_TYPES.WEBSITE_MOBILE || 
           block.type === BLOCK_TYPES.APP_MOBILE || block.type === BLOCK_TYPES.APP_DESKTOP) && editingField === 'title' ? 
            "Title: Project name\nDescription: Brief project description\nURL/Platform: yourproject.com or iOS â€¢ Android\nTechnologies: React, Node.js, etc." :
          (block.type === BLOCK_TYPES.PRINT_TRIFOLD || block.type === BLOCK_TYPES.PRINT_CATALOG || 
           block.type === BLOCK_TYPES.PRINT_BOOK || block.type === BLOCK_TYPES.PRINT_POSTER) && editingField === 'title' ?
            "Title: Print project name\nDescription: Brief description of the print work\nSpecifications/Materials: Size, paper, finish, etc." :
          "Enter your text here..."
        }
      />
    </>
  );
};

// Mobile-First Block Library (Bottom Sheet on Mobile)
const MobileBlockLibrary = ({ onAddBlock, isOpen, onClose }) => {
  const blocks = [
    { type: BLOCK_TYPES.HERO, icon: Layout, label: 'Hero Section' },
    { type: BLOCK_TYPES.HEADING, icon: Type, label: 'Heading' },
    { type: BLOCK_TYPES.TEXT, icon: Type, label: 'Text Block' },
    { type: BLOCK_TYPES.QUOTE, icon: Type, label: 'Quote' },
    { type: BLOCK_TYPES.IMAGE, icon: Image, label: 'Image' },
    { type: BLOCK_TYPES.GALLERY, icon: Grid, label: 'Gallery' },
    { type: BLOCK_TYPES.BUTTON, icon: Layout, label: 'Button' },
    { type: BLOCK_TYPES.SOCIAL_POST, icon: Instagram, label: 'Social Post' },
    { type: BLOCK_TYPES.SOCIAL_STORY, icon: Smartphone, label: 'Story' },
    { type: BLOCK_TYPES.SOCIAL_CAROUSEL, icon: Share2, label: 'Carousel' },
    { type: BLOCK_TYPES.WEBSITE_DESKTOP, icon: Monitor, label: 'Website Desktop' },
    { type: BLOCK_TYPES.WEBSITE_MOBILE, icon: Smartphone, label: 'Website Mobile' },
    { type: BLOCK_TYPES.APP_MOBILE, icon: Layers, label: 'Mobile App' },
    { type: BLOCK_TYPES.APP_DESKTOP, icon: Code, label: 'Desktop App' },
    { type: BLOCK_TYPES.PRINT_TRIFOLD, icon: PanelLeftOpen, label: 'Tri-fold Brochure' },
    { type: BLOCK_TYPES.PRINT_CATALOG, icon: Book, label: 'Bound Catalog' },
    { type: BLOCK_TYPES.PRINT_BOOK, icon: FileText, label: 'Saddle-Stitched' },
    { type: BLOCK_TYPES.PRINT_POSTER, icon: Printer, label: 'Poster/Flyer' },
    { type: BLOCK_TYPES.SPACER, icon: Layout, label: 'Spacer' }
  ];

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-end">
      <div className="bg-white w-full rounded-t-lg max-h-[70vh] overflow-y-auto pb-safe">
        <div className="sticky top-0 bg-white border-b border-gray-200 p-4 flex items-center justify-between">
          <h3 className="text-lg font-semibold">Add Content Block</h3>
          <button 
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-full touch-manipulation"
          >
            <X className="h-6 w-6" />
          </button>
        </div>
        
        <div className="p-4">
          <div className="grid grid-cols-2 gap-3">
            {blocks.slice(0, 7).map(({ type, icon: Icon, label }) => (
              <button
                key={type}
                onClick={() => {
                  onAddBlock(type);
                  onClose();
                }}
                className="flex flex-col items-center gap-2 p-4 border border-gray-200 rounded-lg hover:bg-blue-50 hover:border-blue-300 transition-colors touch-manipulation"
              >
                <Icon className="h-6 w-6 text-gray-600" />
                <span className="text-sm font-medium text-center">{label}</span>
              </button>
            ))}
          </div>
          
          {/* Social Media Section */}
          <div className="mt-6">
            <h4 className="text-sm font-semibold text-purple-700 mb-3 flex items-center gap-2">
              <Instagram className="h-4 w-4" />
              Social Media Showcase
            </h4>
            <div className="grid grid-cols-2 gap-3">
              {blocks.slice(7, 10).map(({ type, icon: Icon, label }) => (
                <button
                  key={type}
                  onClick={() => {
                    onAddBlock(type);
                    onClose();
                  }}
                  className="flex flex-col items-center gap-2 p-4 border border-purple-200 bg-purple-50 rounded-lg hover:bg-purple-100 hover:border-purple-300 transition-colors touch-manipulation"
                >
                  <Icon className="h-6 w-6 text-purple-600" />
                  <span className="text-sm font-medium text-center text-purple-700">{label}</span>
                </button>
              ))}
            </div>
          </div>
          
          {/* Website & App Mockups */}
          <div className="mt-6">
            <h4 className="text-sm font-semibold text-blue-700 mb-3 flex items-center gap-2">
              <Monitor className="h-4 w-4" />
              Website & App Mockups
            </h4>
            <div className="grid grid-cols-2 gap-3">
              {blocks.slice(10, 14).map(({ type, icon: Icon, label }) => (
                <button
                  key={type}
                  onClick={() => {
                    onAddBlock(type);
                    onClose();
                  }}
                  className="flex flex-col items-center gap-2 p-4 border border-blue-200 bg-blue-50 rounded-lg hover:bg-blue-100 hover:border-blue-300 transition-colors touch-manipulation"
                >
                  <Icon className="h-6 w-6 text-blue-600" />
                  <span className="text-sm font-medium text-center text-blue-700">{label}</span>
                </button>
              ))}
            </div>
          </div>
          
          {/* Print Materials */}
          <div className="mt-6">
            <h4 className="text-sm font-semibold text-orange-700 mb-3 flex items-center gap-2">
              <Printer className="h-4 w-4" />
              Print Materials
            </h4>
            <div className="grid grid-cols-2 gap-3">
              {blocks.slice(14, 18).map(({ type, icon: Icon, label }) => (
                <button
                  key={type}
                  onClick={() => {
                    onAddBlock(type);
                    onClose();
                  }}
                  className="flex flex-col items-center gap-2 p-4 border border-orange-200 bg-orange-50 rounded-lg hover:bg-orange-100 hover:border-orange-300 transition-colors touch-manipulation"
                >
                  <Icon className="h-6 w-6 text-orange-600" />
                  <span className="text-sm font-medium text-center text-orange-700">{label}</span>
                </button>
              ))}
            </div>
          </div>
          
          {/* Spacer */}
          <div className="mt-6">
            <div className="grid grid-cols-2 gap-3">
              {blocks.slice(18).map(({ type, icon: Icon, label }) => (
                <button
                  key={type}
                  onClick={() => {
                    onAddBlock(type);
                    onClose();
                  }}
                  className="flex flex-col items-center gap-2 p-4 border border-gray-200 rounded-lg hover:bg-blue-50 hover:border-blue-300 transition-colors touch-manipulation"
                >
                  <Icon className="h-6 w-6 text-gray-600" />
                  <span className="text-sm font-medium text-center">{label}</span>
                </button>
              ))}
            </div>
          </div>
          
          <div className="mt-6 p-4 bg-blue-50 rounded-lg">
            <h4 className="text-sm font-semibold text-blue-800 mb-2">Quick Guide:</h4>
            <div className="space-y-1 text-xs text-blue-700">
              <p>â€¢ Tap any block to select it</p>
              <p>â€¢ Tap the edit button to change text</p>
              <p>â€¢ Use â†‘â†“ arrows to reorder blocks</p>
              <p>â€¢ Tap image areas to upload</p>
              <p>â€¢ Social blocks showcase your work</p>
              <p>â€¢ Mockup blocks display projects professionally</p>
              <p>â€¢ Print blocks support PDF uploads</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Desktop Block Library
const DesktopBlockLibrary = ({ onAddBlock }) => {
  const blocks = [
    { type: BLOCK_TYPES.HERO, icon: Layout, label: 'Hero Section' },
    { type: BLOCK_TYPES.HEADING, icon: Type, label: 'Heading' },
    { type: BLOCK_TYPES.TEXT, icon: Type, label: 'Text Block' },
    { type: BLOCK_TYPES.QUOTE, icon: Type, label: 'Quote' },
    { type: BLOCK_TYPES.IMAGE, icon: Image, label: 'Image' },
    { type: BLOCK_TYPES.GALLERY, icon: Grid, label: 'Gallery' },
    { type: BLOCK_TYPES.BUTTON, icon: Layout, label: 'Button' },
    { type: BLOCK_TYPES.SOCIAL_POST, icon: Instagram, label: 'Social Post' },
    { type: BLOCK_TYPES.SOCIAL_STORY, icon: Smartphone, label: 'Story' },
    { type: BLOCK_TYPES.SOCIAL_CAROUSEL, icon: Share2, label: 'Carousel' },
    { type: BLOCK_TYPES.WEBSITE_DESKTOP, icon: Monitor, label: 'Website Desktop' },
    { type: BLOCK_TYPES.WEBSITE_MOBILE, icon: Smartphone, label: 'Website Mobile' },
    { type: BLOCK_TYPES.APP_MOBILE, icon: Layers, label: 'Mobile App' },
    { type: BLOCK_TYPES.APP_DESKTOP, icon: Code, label: 'Desktop App' },
    { type: BLOCK_TYPES.PRINT_TRIFOLD, icon: PanelLeftOpen, label: 'Tri-fold Brochure' },
    { type: BLOCK_TYPES.PRINT_CATALOG, icon: Book, label: 'Bound Catalog' },
    { type: BLOCK_TYPES.PRINT_BOOK, icon: FileText, label: 'Saddle-Stitched' },
    { type: BLOCK_TYPES.PRINT_POSTER, icon: Printer, label: 'Poster/Flyer' },
    { type: BLOCK_TYPES.SPACER, icon: Layout, label: 'Spacer' }
  ];

  return (
    <div className="w-64 bg-white border-r border-gray-200 h-full overflow-y-auto">
      <div className="p-4">
        <h3 className="text-lg font-semibold mb-4">Add Content</h3>
        <div className="space-y-2">
          {blocks.slice(0, 7).map(({ type, icon: Icon, label }) => (
            <button
              key={type}
              onClick={() => onAddBlock(type)}
              className="w-full flex items-center gap-3 p-3 text-left border border-gray-200 rounded-lg hover:bg-blue-50 hover:border-blue-300 transition-colors"
            >
              <Icon className="h-5 w-5 text-gray-600" />
              <span className="text-sm font-medium">{label}</span>
            </button>
          ))}
        </div>
        
        {/* Social Media Section */}
        <div className="mt-6">
          <h4 className="text-sm font-semibold text-purple-700 mb-3 flex items-center gap-2">
            <Instagram className="h-4 w-4" />
            Social Media
          </h4>
          <div className="space-y-2">
            {blocks.slice(7, 10).map(({ type, icon: Icon, label }) => (
              <button
                key={type}
                onClick={() => onAddBlock(type)}
                className="w-full flex items-center gap-3 p-3 text-left border border-purple-200 bg-purple-50 rounded-lg hover:bg-purple-100 hover:border-purple-300 transition-colors"
              >
                <Icon className="h-5 w-5 text-purple-600" />
                <span className="text-sm font-medium text-purple-700">{label}</span>
              </button>
            ))}
          </div>
        </div>
        
        {/* Website & App Mockups */}
        <div className="mt-6">
          <h4 className="text-sm font-semibold text-blue-700 mb-3 flex items-center gap-2">
            <Monitor className="h-4 w-4" />
            Mockups
          </h4>
          <div className="space-y-2">
            {blocks.slice(10, 14).map(({ type, icon: Icon, label }) => (
              <button
                key={type}
                onClick={() => onAddBlock(type)}
                className="w-full flex items-center gap-3 p-3 text-left border border-blue-200 bg-blue-50 rounded-lg hover:bg-blue-100 hover:border-blue-300 transition-colors"
              >
                <Icon className="h-5 w-5 text-blue-600" />
                <span className="text-sm font-medium text-blue-700">{label}</span>
              </button>
            ))}
          </div>
        </div>
        
        {/* Print Materials */}
        <div className="mt-6">
          <h4 className="text-sm font-semibold text-orange-700 mb-3 flex items-center gap-2">
            <Printer className="h-4 w-4" />
            Print Materials
          </h4>
          <div className="space-y-2">
            {blocks.slice(14, 18).map(({ type, icon: Icon, label }) => (
              <button
                key={type}
                onClick={() => onAddBlock(type)}
                className="w-full flex items-center gap-3 p-3 text-left border border-orange-200 bg-orange-50 rounded-lg hover:bg-orange-100 hover:border-orange-300 transition-colors"
              >
                <Icon className="h-5 w-5 text-orange-600" />
                <span className="text-sm font-medium text-orange-700">{label}</span>
              </button>
            ))}
          </div>
        </div>
        
        {/* Layout */}
        <div className="mt-6">
          <h4 className="text-sm font-semibold text-gray-700 mb-3">Layout</h4>
          <div className="space-y-2">
            {blocks.slice(18).map(({ type, icon: Icon, label }) => (
              <button
                key={type}
                onClick={() => onAddBlock(type)}
                className="w-full flex items-center gap-3 p-3 text-left border border-gray-200 rounded-lg hover:bg-blue-50 hover:border-blue-300 transition-colors"
              >
                <Icon className="h-5 w-5 text-gray-600" />
                <span className="text-sm font-medium">{label}</span>
              </button>
            ))}
          </div>
        </div>
        
        <div className="mt-8 p-4 bg-blue-50 rounded-lg">
          <h4 className="text-sm font-semibold text-blue-800 mb-2">How to Edit:</h4>
          <div className="space-y-1 text-xs text-blue-700">
            <p>â€¢ Click any block to select it</p>
            <p>â€¢ Click the <Edit3 className="inline h-3 w-3" /> button to edit text</p>
            <p>â€¢ Use â†‘â†“ arrows to reorder blocks</p>
            <p>â€¢ Drag images to upload them</p>
            <p>â€¢ Social blocks perfect for portfolios</p>
            <p>â€¢ Mockup blocks showcase projects professionally</p>
            <p>â€¢ Print blocks accept PDF files for realistic showcases</p>
          </div>
        </div>
      </div>
    </div>
  );
};

// Mobile Properties Panel (Bottom Sheet)
const MobilePropertiesPanel = ({ selectedBlock, onUpdateBlock, uploadFile, isOpen, onClose }) => {
  if (!isOpen || !selectedBlock) return null;

  const handleStyleChange = (styleKey, value) => {
    onUpdateBlock(selectedBlock.id, {
      styles: { ...selectedBlock.styles, [styleKey]: value }
    });
  };

  const handleHeroBackgroundUpload = async (file) => {
    const uploadedFile = await uploadFile(file);
    onUpdateBlock(selectedBlock.id, {
      content: { 
        ...selectedBlock.content, 
        backgroundImage: uploadedFile.url 
      }
    });
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-end">
      <div className="bg-white w-full rounded-t-lg max-h-[80vh] overflow-y-auto pb-safe">
        <div className="sticky top-0 bg-white border-b border-gray-200 p-4 flex items-center justify-between">
          <h3 className="text-lg font-semibold">Block Settings</h3>
          <button 
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-full touch-manipulation"
          >
            <X className="h-6 w-6" />
          </button>
        </div>
        
        <div className="p-4 space-y-6">
          {/* Block Info */}
          <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
            <p className="text-base font-medium text-blue-800 capitalize">{selectedBlock.type} Block</p>
            <p className="text-sm text-blue-600">Tap the edit button to change content</p>
          </div>

          {/* Social Media Properties */}
          {(selectedBlock.type === BLOCK_TYPES.SOCIAL_POST || 
            selectedBlock.type === BLOCK_TYPES.SOCIAL_STORY ||
            selectedBlock.type === BLOCK_TYPES.SOCIAL_CAROUSEL) && (
            <>
              <div className="bg-purple-50 p-4 rounded-lg border border-purple-200">
                <p className="text-base font-medium text-purple-800 capitalize">Social Media Block</p>
                <p className="text-sm text-purple-600">Upload media and customize your social showcase</p>
              </div>

              <div>
                <label className="block text-base font-medium mb-3">Username</label>
                <input
                  type="text"
                  value={selectedBlock.content?.username || ''}
                  onChange={(e) => onUpdateBlock(selectedBlock.id, {
                    content: { ...selectedBlock.content, username: e.target.value }
                  })}
                  className="w-full p-3 text-base border border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
                  placeholder="your_portfolio"
                />
              </div>

              {selectedBlock.type === BLOCK_TYPES.SOCIAL_POST && (
                <div>
                  <label className="block text-base font-medium mb-3">Location</label>
                  <input
                    type="text"
                    value={selectedBlock.content?.location || ''}
                    onChange={(e) => onUpdateBlock(selectedBlock.id, {
                      content: { ...selectedBlock.content, location: e.target.value }
                    })}
                    className="w-full p-3 text-base border border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
                    placeholder="Your Location"
                  />
                </div>
              )}

              {(selectedBlock.type === BLOCK_TYPES.SOCIAL_POST || selectedBlock.type === BLOCK_TYPES.SOCIAL_CAROUSEL) && (
                <div>
                  <label className="block text-base font-medium mb-3">Hashtags</label>
                  <input
                    type="text"
                    value={selectedBlock.content?.hashtags || ''}
                    onChange={(e) => onUpdateBlock(selectedBlock.id, {
                      content: { ...selectedBlock.content, hashtags: e.target.value }
                    })}
                    className="w-full p-3 text-base border border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
                    placeholder="#portfolio #design #creative"
                  />
                </div>
              )}

              {selectedBlock.type === BLOCK_TYPES.SOCIAL_POST && (
                <div>
                  <label className="block text-base font-medium mb-3">Likes Count</label>
                  <input
                    type="text"
                    value={selectedBlock.content?.likes || ''}
                    onChange={(e) => onUpdateBlock(selectedBlock.id, {
                      content: { ...selectedBlock.content, likes: e.target.value }
                    })}
                    className="w-full p-3 text-base border border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
                    placeholder="42"
                  />
                </div>
              )}
            </>
          )}

          {/* Social Media Properties */}
        {(selectedBlock.type === BLOCK_TYPES.SOCIAL_POST || 
          selectedBlock.type === BLOCK_TYPES.SOCIAL_STORY ||
          selectedBlock.type === BLOCK_TYPES.SOCIAL_CAROUSEL) && (
          <>
            <div className="bg-purple-50 p-3 rounded-lg border border-purple-200">
              <p className="text-sm font-medium text-purple-800 capitalize">Social Media Block</p>
              <p className="text-xs text-purple-600">Upload media and customize</p>
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">Username</label>
              <input
                type="text"
                value={selectedBlock.content?.username || ''}
                onChange={(e) => onUpdateBlock(selectedBlock.id, {
                  content: { ...selectedBlock.content, username: e.target.value }
                })}
                className="w-full p-2 border border-gray-300 rounded"
                placeholder="your_portfolio"
              />
            </div>

            {selectedBlock.type === BLOCK_TYPES.SOCIAL_POST && (
              <>
                <div>
                  <label className="block text-sm font-medium mb-2">Location</label>
                  <input
                    type="text"
                    value={selectedBlock.content?.location || ''}
                    onChange={(e) => onUpdateBlock(selectedBlock.id, {
                      content: { ...selectedBlock.content, location: e.target.value }
                    })}
                    className="w-full p-2 border border-gray-300 rounded"
                    placeholder="Your Location"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-2">Likes Count</label>
                  <input
                    type="text"
                    value={selectedBlock.content?.likes || ''}
                    onChange={(e) => onUpdateBlock(selectedBlock.id, {
                      content: { ...selectedBlock.content, likes: e.target.value }
                    })}
                    className="w-full p-2 border border-gray-300 rounded"
                    placeholder="42"
                  />
                </div>
              </>
            )}

            {(selectedBlock.type === BLOCK_TYPES.SOCIAL_POST || selectedBlock.type === BLOCK_TYPES.SOCIAL_CAROUSEL) && (
              <div>
                <label className="block text-sm font-medium mb-2">Hashtags</label>
                <input
                  type="text"
                  value={selectedBlock.content?.hashtags || ''}
                  onChange={(e) => onUpdateBlock(selectedBlock.id, {
                    content: { ...selectedBlock.content, hashtags: e.target.value }
                  })}
                  className="w-full p-2 border border-gray-300 rounded"
                  placeholder="#portfolio #design"
                />
              </div>
            )}
          </>
        )}

        {/* Hero Background */}
          {selectedBlock.type === BLOCK_TYPES.HERO && (
            <div>
              <label className="block text-base font-medium mb-3">Background Image</label>
              <FileUploadArea onFileUpload={handleHeroBackgroundUpload}>
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-blue-400 transition-colors cursor-pointer">
                  {selectedBlock.content?.backgroundImage ? (
                    <img 
                      src={selectedBlock.content.backgroundImage} 
                      alt="Background"
                      className="w-full h-32 object-cover rounded"
                    />
                  ) : (
                    <>
                      <Upload className="mx-auto h-8 w-8 text-gray-400" />
                      <p className="text-sm text-gray-600 mt-2">Tap to upload background</p>
                    </>
                  )}
                </div>
              </FileUploadArea>
              
              <div className="mt-4">
                <label className="block text-base font-medium mb-3">Overlay Opacity</label>
                <input
                  type="range"
                  min="0"
                  max="1"
                  step="0.1"
                  value={selectedBlock.content?.overlayOpacity || 0}
                  onChange={(e) => onUpdateBlock(selectedBlock.id, {
                    content: { 
                      ...selectedBlock.content, 
                      overlayOpacity: parseFloat(e.target.value)
                    }
                  })}
                  className="w-full h-8 touch-manipulation"
                />
                <span className="text-sm text-gray-500">
                  {Math.round((selectedBlock.content?.overlayOpacity || 0) * 100)}%
                </span>
              </div>
            </div>
          )}

          {/* Text Alignment */}
          {(selectedBlock.type === BLOCK_TYPES.TEXT || 
            selectedBlock.type === BLOCK_TYPES.HEADING ||
            selectedBlock.type === BLOCK_TYPES.QUOTE) && (
            <div>
              <label className="block text-base font-medium mb-3">Text Alignment</label>
              <div className="grid grid-cols-3 gap-2">
                {['left', 'center', 'right'].map((align) => {
                  const Icon = align === 'left' ? AlignLeft : align === 'center' ? AlignCenter : AlignRight;
                  return (
                    <button
                      key={align}
                      onClick={() => handleStyleChange('textAlign', align)}
                      className={`p-4 rounded-lg border ${
                        selectedBlock.styles?.textAlign === align 
                          ? 'bg-blue-100 border-blue-300 text-blue-700' 
                          : 'bg-gray-50 border-gray-300 text-gray-600'
                      } touch-manipulation`}
                    >
                      <Icon className="h-6 w-6 mx-auto" />
                    </button>
                  );
                })}
              </div>
            </div>
          )}

          {/* Font Size */}
          {(selectedBlock.type === BLOCK_TYPES.TEXT || 
            selectedBlock.type === BLOCK_TYPES.HEADING ||
            selectedBlock.type === BLOCK_TYPES.QUOTE) && (
            <div>
              <label className="block text-base font-medium mb-3">Font Size</label>
              <select 
                value={selectedBlock.styles?.fontSize || '1rem'}
                onChange={(e) => handleStyleChange('fontSize', e.target.value)}
                className="w-full p-4 text-base border border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 touch-manipulation"
              >
                <option value="0.875rem">Small (14px)</option>
                <option value="1rem">Normal (16px)</option>
                <option value="1.125rem">Large (18px)</option>
                <option value="1.25rem">XL (20px)</option>
                <option value="1.5rem">2XL (24px)</option>
                <option value="2rem">3XL (32px)</option>
                <option value="2.5rem">4XL (40px)</option>
                <option value="3rem">5XL (48px)</option>
              </select>
            </div>
          )}

          {/* Colors */}
          <div>
            <label className="block text-base font-medium mb-3">Text Color</label>
            <input
              type="color"
              value={selectedBlock.styles?.color || '#000000'}
              onChange={(e) => handleStyleChange('color', e.target.value)}
              className="w-full h-12 border border-gray-300 rounded-lg cursor-pointer touch-manipulation"
            />
          </div>

          <div>
            <label className="block text-base font-medium mb-3">Background Color</label>
            <input
              type="color"
              value={selectedBlock.styles?.backgroundColor || '#ffffff'}
              onChange={(e) => handleStyleChange('backgroundColor', e.target.value)}
              className="w-full h-12 border border-gray-300 rounded-lg cursor-pointer touch-manipulation"
            />
          </div>

          {/* Padding */}
          <div>
            <label className="block text-base font-medium mb-3">Padding</label>
            <select
              value={selectedBlock.styles?.padding || '1rem'}
              onChange={(e) => handleStyleChange('padding', e.target.value)}
              className="w-full p-4 text-base border border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 touch-manipulation"
            >
              <option value="0">None</option>
              <option value="0.5rem">Small</option>
              <option value="1rem">Medium</option>
              <option value="2rem">Large</option>
              <option value="3rem">XL</option>
            </select>
          </div>
        </div>
      </div>
    </div>
  );
};

// Desktop Properties Panel
const DesktopPropertiesPanel = ({ selectedBlock, onUpdateBlock, uploadFile }) => {
  if (!selectedBlock) {
    return (
      <div className="w-64 bg-white border-l border-gray-200 h-full p-4">
        <h3 className="text-lg font-semibold mb-4">Block Settings</h3>
        <div className="text-center text-gray-500 mt-8">
          <Square className="mx-auto h-12 w-12 text-gray-300 mb-4" />
          <p>Select a block to edit its settings</p>
        </div>
      </div>
    );
  }

  const handleStyleChange = (styleKey, value) => {
    onUpdateBlock(selectedBlock.id, {
      styles: { ...selectedBlock.styles, [styleKey]: value }
    });
  };

  const handleHeroBackgroundUpload = async (file) => {
    const uploadedFile = await uploadFile(file);
    onUpdateBlock(selectedBlock.id, {
      content: { 
        ...selectedBlock.content, 
        backgroundImage: uploadedFile.url 
      }
    });
  };

  return (
    <div className="w-64 bg-white border-l border-gray-200 h-full p-4 overflow-y-auto">
      <h3 className="text-lg font-semibold mb-4">Block Settings</h3>
      
      <div className="space-y-4">
        {/* Block Info */}
        <div className="bg-blue-50 p-3 rounded-lg border border-blue-200">
          <p className="text-sm font-medium text-blue-800 capitalize">{selectedBlock.type} Block</p>
          <p className="text-xs text-blue-600">Click edit button to change content</p>
        </div>

        {/* Hero Background */}
        {selectedBlock.type === BLOCK_TYPES.HERO && (
          <div>
            <label className="block text-sm font-medium mb-2">Background Image</label>
            <FileUploadArea onFileUpload={handleHeroBackgroundUpload}>
              <div className="border-2 border-dashed border-gray-300 rounded-lg p-3 text-center hover:border-blue-400 transition-colors cursor-pointer">
                {selectedBlock.content?.backgroundImage ? (
                  <img 
                    src={selectedBlock.content.backgroundImage} 
                    alt="Background"
                    className="w-full h-20 object-cover rounded"
                  />
                ) : (
                  <>
                    <Upload className="mx-auto h-6 w-6 text-gray-400" />
                    <p className="text-xs text-gray-600 mt-1">Upload background</p>
                  </>
                )}
              </div>
            </FileUploadArea>
          </div>
        )}

        {/* Other properties same as before but condensed for desktop */}
        
        {/* Text Alignment */}
        {(selectedBlock.type === BLOCK_TYPES.TEXT || 
          selectedBlock.type === BLOCK_TYPES.HEADING ||
          selectedBlock.type === BLOCK_TYPES.QUOTE) && (
          <div>
            <label className="block text-sm font-medium mb-2">Text Align</label>
            <div className="flex gap-1">
              {['left', 'center', 'right'].map((align) => {
                const Icon = align === 'left' ? AlignLeft : align === 'center' ? AlignCenter : AlignRight;
                return (
                  <button
                    key={align}
                    onClick={() => handleStyleChange('textAlign', align)}
                    className={`flex-1 p-2 rounded border ${
                      selectedBlock.styles?.textAlign === align 
                        ? 'bg-blue-100 border-blue-300 text-blue-700' 
                        : 'bg-gray-50 border-gray-300 text-gray-600'
                    }`}
                  >
                    <Icon className="h-4 w-4 mx-auto" />
                  </button>
                );
              })}
            </div>
          </div>
        )}

        {/* Font Size */}
        {(selectedBlock.type === BLOCK_TYPES.TEXT || 
          selectedBlock.type === BLOCK_TYPES.HEADING ||
          selectedBlock.type === BLOCK_TYPES.QUOTE) && (
          <div>
            <label className="block text-sm font-medium mb-2">Font Size</label>
            <select 
              value={selectedBlock.styles?.fontSize || '1rem'}
              onChange={(e) => handleStyleChange('fontSize', e.target.value)}
              className="w-full p-2 border border-gray-300 rounded"
            >
              <option value="0.875rem">Small</option>
              <option value="1rem">Normal</option>
              <option value="1.125rem">Large</option>
              <option value="1.5rem">XL</option>
              <option value="2rem">2XL</option>
              <option value="3rem">3XL</option>
            </select>
          </div>
        )}

        {/* Colors */}
        <div>
          <label className="block text-sm font-medium mb-2">Text Color</label>
          <input
            type="color"
            value={selectedBlock.styles?.color || '#000000'}
            onChange={(e) => handleStyleChange('color', e.target.value)}
            className="w-full h-8 border border-gray-300 rounded cursor-pointer"
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">Background Color</label>
          <input
            type="color"
            value={selectedBlock.styles?.backgroundColor || '#ffffff'}
            onChange={(e) => handleStyleChange('backgroundColor', e.target.value)}
            className="w-full h-8 border border-gray-300 rounded cursor-pointer"
          />
        </div>
      </div>
    </div>
  );
};

// Main Mobile-First Editor Component
const PortfolioEditor = () => {
  const [blocks, setBlocks] = useState(DEFAULT_TEMPLATE);
  const [selectedBlockId, setSelectedBlockId] = useState(null);
  const [history, setHistory] = useState([DEFAULT_TEMPLATE]);
  const [historyIndex, setHistoryIndex] = useState(0);
  const [isPreviewMode, setIsPreviewMode] = useState(false);
  const [showMobileBlockLibrary, setShowMobileBlockLibrary] = useState(false);
  const [showMobileProperties, setShowMobileProperties] = useState(false);
  const { uploadedFiles, uploadFile } = useFileUpload();
  const isMobile = useIsMobile();

  const selectedBlock = blocks.find(block => block.id === selectedBlockId);

  // Save state to history
  const saveToHistory = useCallback((newBlocks) => {
    const newHistory = history.slice(0, historyIndex + 1);
    newHistory.push(newBlocks);
    setHistory(newHistory);
    setHistoryIndex(newHistory.length - 1);
  }, [history, historyIndex]);

  // Add new block
  const addBlock = useCallback((type) => {
    const newBlock = {
      id: Date.now().toString(),
      type,
      content: type === BLOCK_TYPES.HERO ? {
        title: 'New Hero Section',
        subtitle: 'Hero subtitle',
        backgroundImage: null,
        overlayOpacity: 0.4
      } : type === BLOCK_TYPES.HEADING ? 'New Heading' : 
               type === BLOCK_TYPES.TEXT ? 'New text block. Tap the edit button to change this text.' : 
               type === BLOCK_TYPES.QUOTE ? '"Your inspiring quote goes here."' :
               type === BLOCK_TYPES.BUTTON ? 'Click Me' : 
               type === BLOCK_TYPES.SOCIAL_POST ? {
                 username: 'your_portfolio',
                 location: 'Your Location',
                 caption: 'Share your creative work and story with the world! âœ¨',
                 hashtags: '#portfolio #design #creative',
                 likes: '42',
                 timeAgo: '2h',
                 mediaUrl: null,
                 mediaType: 'image'
               } :
               type === BLOCK_TYPES.SOCIAL_STORY ? {
                 username: 'your_portfolio',
                 storyText: 'Behind the scenes of my creative process',
                 timeAgo: '1h',
                 mediaUrl: null,
                 mediaType: 'image'
               } :
               type === BLOCK_TYPES.SOCIAL_CAROUSEL ? {
                 username: 'your_portfolio',
                 caption: 'Swipe to see the complete project breakdown â†’',
                 images: []
               } :
               type === BLOCK_TYPES.WEBSITE_DESKTOP ? {
                 title: 'My Website Project',
                 description: 'A modern, responsive website built with cutting-edge technologies',
                 url: 'myproject.com',
                 projectType: 'Web Development',
                 technologies: 'React, Node.js, MongoDB'
               } :
               type === BLOCK_TYPES.WEBSITE_MOBILE ? {
                 title: 'Mobile Website',
                 description: 'Mobile-optimized responsive design',
                 url: 'myproject.com',
                 technologies: 'React, CSS3, PWA'
               } :
               type === BLOCK_TYPES.APP_MOBILE ? {
                 title: 'Mobile App',
                 description: 'Native mobile application with intuitive user experience',
                 platform: 'iOS â€¢ Android',
                 technologies: 'React Native, Firebase'
               } :
               type === BLOCK_TYPES.APP_DESKTOP ? {
                 title: 'Desktop Application',
                 description: 'Cross-platform desktop application built for productivity',
                 platform: 'Windows â€¢ Mac â€¢ Linux',
                 technologies: 'Electron, React, Node.js'
               } :
               type === BLOCK_TYPES.PRINT_TRIFOLD ? {
                 title: 'Marketing Brochure',
                 description: 'Professional tri-fold brochure showcasing company services',
                 specifications: '11" x 8.5", 100lb Gloss Cover, Full Color'
               } :
               type === BLOCK_TYPES.PRINT_CATALOG ? {
                 title: 'Product Catalog',
                 description: 'Comprehensive catalog featuring complete product line',
                 specifications: '8.5" x 11", 32 pages, Perfect Bound, 300 DPI'
               } :
               type === BLOCK_TYPES.PRINT_BOOK ? {
                 title: 'Company Brochure',
                 description: 'Saddle-stitched booklet with company overview and services',
                 specifications: '8.5" x 11", 12 pages, Saddle-Stitched, Matte Finish'
               } :
               type === BLOCK_TYPES.PRINT_POSTER ? {
                 title: 'Event Poster',
                 description: 'Eye-catching promotional poster for special event',
                 materials: '18" x 24", Heavy Stock, UV Coating, Full Bleed'
               } :
               type === BLOCK_TYPES.GALLERY ? '' : '',
      styles: {
        marginBottom: isMobile ? '1.5rem' : '2rem',
        ...(type === BLOCK_TYPES.HERO && { 
          minHeight: isMobile ? '50vh' : '60vh', 
          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
          color: 'white',
          padding: isMobile ? '2rem 1rem' : '4rem 2rem',
          textAlign: 'center',
          display: 'flex',
          flexDirection: 'column',
          justifyContent: 'center',
          alignItems: 'center'
        }),
        ...(type === BLOCK_TYPES.HEADING && { fontSize: isMobile ? '1.75rem' : '2rem', fontWeight: 'bold' }),
        ...(type === BLOCK_TYPES.TEXT && { fontSize: isMobile ? '1rem' : '1rem', lineHeight: '1.6', padding: isMobile ? '1rem' : '1rem' }),
        ...(type === BLOCK_TYPES.QUOTE && { fontSize: isMobile ? '1.1rem' : '1.25rem', fontStyle: 'italic' }),
        ...(type === BLOCK_TYPES.BUTTON && { 
          backgroundColor: '#3b82f6', 
          color: 'white', 
          padding: isMobile ? '1rem 2rem' : '0.75rem 1.5rem', 
          borderRadius: '0.5rem', 
          display: 'inline-block' 
        }),
        ...((type === BLOCK_TYPES.SOCIAL_POST || type === BLOCK_TYPES.SOCIAL_STORY || type === BLOCK_TYPES.SOCIAL_CAROUSEL) && {
          padding: isMobile ? '1rem' : '2rem',
          display: 'flex',
          justifyContent: 'center'
        }),
        ...((type === BLOCK_TYPES.WEBSITE_DESKTOP || type === BLOCK_TYPES.WEBSITE_MOBILE || 
             type === BLOCK_TYPES.APP_MOBILE || type === BLOCK_TYPES.APP_DESKTOP) && {
          padding: isMobile ? '1rem' : '2rem',
          display: 'flex',
          justifyContent: 'center'
        }),
        ...((type === BLOCK_TYPES.PRINT_TRIFOLD || type === BLOCK_TYPES.PRINT_CATALOG ||
             type === BLOCK_TYPES.PRINT_BOOK || type === BLOCK_TYPES.PRINT_POSTER) && {
          padding: isMobile ? '1rem' : '2rem',
          display: 'flex',
          justifyContent: 'center'
        })
      },
      ...(type === BLOCK_TYPES.GALLERY && { images: [] })
    };
    
    const newBlocks = [...blocks, newBlock];
    setBlocks(newBlocks);
    setSelectedBlockId(newBlock.id);
    saveToHistory(newBlocks);
  }, [blocks, saveToHistory, isMobile]);

  // Update block
  const updateBlock = useCallback((blockId, updates) => {
    const newBlocks = blocks.map(block => 
      block.id === blockId ? { ...block, ...updates } : block
    );
    setBlocks(newBlocks);
  }, [blocks]);

  // Delete block
  const deleteBlock = useCallback((blockId) => {
    const newBlocks = blocks.filter(block => block.id !== blockId);
    setBlocks(newBlocks);
    setSelectedBlockId(null);
    saveToHistory(newBlocks);
  }, [blocks, saveToHistory]);

  // Duplicate block
  const duplicateBlock = useCallback((blockId) => {
    const blockToDuplicate = blocks.find(block => block.id === blockId);
    if (blockToDuplicate) {
      const newBlock = {
        ...blockToDuplicate,
        id: Date.now().toString()
      };
      
      const blockIndex = blocks.findIndex(block => block.id === blockId);
      const newBlocks = [
        ...blocks.slice(0, blockIndex + 1),
        newBlock,
        ...blocks.slice(blockIndex + 1)
      ];
      
      setBlocks(newBlocks);
      setSelectedBlockId(newBlock.id);
      saveToHistory(newBlocks);
    }
  }, [blocks, saveToHistory]);

  // Move block
  const moveBlock = useCallback((blockId, direction) => {
    const currentIndex = blocks.findIndex(block => block.id === blockId);
    if (currentIndex === -1) return;
    
    const newIndex = direction === 'up' ? currentIndex - 1 : currentIndex + 1;
    if (newIndex < 0 || newIndex >= blocks.length) return;
    
    const newBlocks = [...blocks];
    [newBlocks[currentIndex], newBlocks[newIndex]] = [newBlocks[newIndex], newBlocks[currentIndex]];
    
    setBlocks(newBlocks);
    saveToHistory(newBlocks);
  }, [blocks, saveToHistory]);

  // Undo/Redo
  const undo = () => {
    if (historyIndex > 0) {
      setHistoryIndex(historyIndex - 1);
      setBlocks(history[historyIndex - 1]);
    }
  };

  const redo = () => {
    if (historyIndex < history.length - 1) {
      setHistoryIndex(historyIndex + 1);
      setBlocks(history[historyIndex + 1]);
    }
  };

  // Save template
  const saveTemplate = () => {
    const template = {
      id: Date.now(),
      name: 'My Portfolio Template',
      blocks: blocks,
      uploadedFiles: uploadedFiles,
      createdAt: new Date().toISOString()
    };
    
    console.log('Saved template:', template);
    alert('Template saved successfully! âœ¨');
  };

  return (
    <div className="h-screen flex flex-col bg-gray-50">
      {/* Mobile-First Header */}
      <div className="bg-white border-b border-gray-200 px-4 py-3 md:py-2">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2 md:gap-4">
            <h1 className="text-lg md:text-xl font-bold text-gray-900">PortfolioForge</h1>
            <div className="hidden md:flex items-center gap-2">
              <button
                onClick={undo}
                disabled={historyIndex <= 0}
                className="p-2 rounded hover:bg-gray-100 disabled:opacity-50"
                title="Undo"
              >
                <Undo className="h-4 w-4" />
              </button>
              <button
                onClick={redo}
                disabled={historyIndex >= history.length - 1}
                className="p-2 rounded hover:bg-gray-100 disabled:opacity-50"
                title="Redo"
              >
                <Redo className="h-4 w-4" />
              </button>
            </div>
          </div>
          
          <div className="flex items-center gap-2">
            <button
              onClick={() => setIsPreviewMode(!isPreviewMode)}
              className={`px-3 py-2 md:px-4 rounded flex items-center gap-2 text-sm touch-manipulation ${
                isPreviewMode ? 'bg-blue-100 text-blue-700' : 'bg-gray-100'
              }`}
            >
              <Eye className="h-4 w-4" />
              {isPreviewMode ? 'Edit' : 'Preview'}
            </button>
            <button
              onClick={saveTemplate}
              className="px-3 py-2 md:px-4 bg-blue-600 text-white rounded hover:bg-blue-700 flex items-center gap-2 text-sm touch-manipulation"
            >
              <Save className="h-4 w-4" />
              Save
            </button>
          </div>
        </div>
      </div>

      {/* Mobile Bottom Navigation */}
      {isMobile && !isPreviewMode && (
        <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 px-4 py-2 z-40">
          <div className="flex items-center justify-around">
            <button
              onClick={() => setShowMobileBlockLibrary(true)}
              className="flex flex-col items-center gap-1 p-2 touch-manipulation"
            >
              <Plus className="h-6 w-6 text-blue-600" />
              <span className="text-xs text-gray-600">Add</span>
            </button>
            
            <button
              onClick={() => selectedBlock && setShowMobileProperties(true)}
              className={`flex flex-col items-center gap-1 p-2 touch-manipulation ${selectedBlock ? 'text-blue-600' : 'text-gray-400'}`}
              disabled={!selectedBlock}
            >
              <Settings className="h-6 w-6" />
              <span className="text-xs">Settings</span>
            </button>
            
            <button
              onClick={undo}
              disabled={historyIndex <= 0}
              className="flex flex-col items-center gap-1 p-2 touch-manipulation disabled:text-gray-400"
            >
              <Undo className="h-6 w-6" />
              <span className="text-xs">Undo</span>
            </button>
            
            <button
              onClick={redo}
              disabled={historyIndex >= history.length - 1}
              className="flex flex-col items-center gap-1 p-2 touch-manipulation disabled:text-gray-400"
            >
              <Redo className="h-6 w-6" />
              <span className="text-xs">Redo</span>
            </button>
          </div>
        </div>
      )}

      {/* Main Editor Area */}
      <div className="flex-1 flex">
        {/* Desktop Block Library */}
        {!isMobile && !isPreviewMode && <DesktopBlockLibrary onAddBlock={addBlock} />}
        
        {/* Canvas */}
        <div className="flex-1 overflow-y-auto" style={{ paddingBottom: isMobile ? '80px' : '0' }}>
          <div className={`mx-auto ${isMobile ? 'px-4 py-4' : 'max-w-5xl px-8 py-8'}`}>
            <div className="bg-white rounded-lg shadow-sm min-h-screen overflow-hidden">
              {blocks.map((block, index) => (
                <Block
                  key={block.id}
                  block={block}
                  isSelected={!isPreviewMode && selectedBlockId === block.id}
                  onSelect={setSelectedBlockId}
                  onUpdate={updateBlock}
                  onDelete={deleteBlock}
                  onDuplicate={duplicateBlock}
                  uploadFile={uploadFile}
                  onMoveUp={() => moveBlock(block.id, 'up')}
                  onMoveDown={() => moveBlock(block.id, 'down')}
                  canMoveUp={index > 0}
                  canMoveDown={index < blocks.length - 1}
                />
              ))}
              
              {blocks.length === 0 && (
                <div className="text-center py-16">
                  <Grid className="mx-auto h-16 w-16 text-gray-300" />
                  <h3 className="mt-4 text-lg font-medium text-gray-900">Start Building Your Portfolio</h3>
                  <p className="mt-2 text-gray-500 px-4">
                    {isMobile ? 'Tap the + button below to add content blocks' : 'Add blocks from the left sidebar to create your perfect portfolio layout'}
                  </p>
                </div>
              )}
            </div>
          </div>
        </div>
        
        {/* Desktop Properties Panel */}
        {!isMobile && !isPreviewMode && (
          <DesktopPropertiesPanel 
            selectedBlock={selectedBlock}
            onUpdateBlock={updateBlock}
            uploadFile={uploadFile}
          />
        )}
      </div>

      {/* Mobile Modals */}
      <MobileBlockLibrary 
        onAddBlock={addBlock}
        isOpen={showMobileBlockLibrary}
        onClose={() => setShowMobileBlockLibrary(false)}
      />
      
      <MobilePropertiesPanel 
        selectedBlock={selectedBlock}
        onUpdateBlock={updateBlock}
        uploadFile={uploadFile}
        isOpen={showMobileProperties}
        onClose={() => setShowMobileProperties(false)}
      />
    </div>
  );
};

export default PortfolioEditor;
